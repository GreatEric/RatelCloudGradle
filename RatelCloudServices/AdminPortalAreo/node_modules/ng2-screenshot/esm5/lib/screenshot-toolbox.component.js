import * as tslib_1 from "tslib";
import { Component, ElementRef, ViewChild, Inject } from '@angular/core';
import { ScreenshotComponent } from './screenshot.component';
/**
 * Custom template of screenshot toolbox, connent with screenshot
 */
var ScreenshotToolboxComponent = /** @class */ (function () {
    function ScreenshotToolboxComponent(parent) {
        this.parent = parent;
        this.hasContent = false;
        // const template = `<div class="screenshot-toolbox">${el.nativeElement.children().html()}</div>`;
        // renderer.selectRootElement(template);
        // el.nativeElement.remove();
    }
    ScreenshotToolboxComponent.prototype.cancel = function () {
        this.parent.cancel();
    };
    ScreenshotToolboxComponent.prototype.download = function () {
        this.parent.download();
    };
    ScreenshotToolboxComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        window.setTimeout(function () {
            _this.hasContent = _this.wrapper.nativeElement.children.length > 0;
        });
    };
    ScreenshotToolboxComponent.ctorParameters = function () { return [
        { type: ScreenshotComponent, decorators: [{ type: Inject, args: [ScreenshotComponent,] }] }
    ]; };
    tslib_1.__decorate([
        ViewChild('wrapper', { static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], ScreenshotToolboxComponent.prototype, "wrapper", void 0);
    ScreenshotToolboxComponent = tslib_1.__decorate([
        Component({
            selector: 'ng2-screenshot-toolbox',
            template: "\n        <div class=\"screenshot-toolbox\" [hidden]=\"!parent.showToolbox\">\n            <div #wrapper>\n                <ng-content></ng-content>\n            </div>\n            <div *ngIf=\"!hasContent\">\n                <button class=\"btn\" type=\"button\" (click)=\"cancel()\">\n                    Cancel\n                </button>\n                <button class=\"btn\" type=\"button\" (click)=\"download()\">\n                    Download\n                </button>\n            </div>\n        </div>\n    ",
            styles: ["/*! Angular Screenshot - v0.1.0 - http://weihanchen.github.io/ng2-screenshot - (c) 2017 weihanchen - MIT */.screenshot-toolbox{width:100%}.screenshot-toolbox button{margin:.2em}.screenshot-toolbox .btn{position:relative;padding:.2em .4em;overflow:hidden;border-width:0;outline:0;border-radius:.2em;box-shadow:0 .1em .2em #4f4f4f;background-color:#e6e3e3;color:#4f4f4f;-webkit-transition:background-color .3s;transition:background-color .3s}.screenshot-toolbox .btn:focus,.screenshot-toolbox .btn:hover{background:#cdcccc}.screenshot-toolbox .btn>*{position:relative}.screenshot-toolbox .btn:before{content:\"\";position:absolute;top:50%;left:50%;display:block;width:0;padding-top:0;border-radius:100%;background-color:rgba(205,204,204,.3);-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.screenshot-toolbox .btn:active:before{width:120%;padding-top:120%;-webkit-transition:width .2s ease-out,padding-top .2s ease-out;transition:width .2s ease-out,padding-top .2s ease-out}.screenshot-toolbox .btn-navy{background-color:#1d9e74}.screenshot-toolbox .btn-navy:focus,.screenshot-toolbox .btn-navy:hover{background-color:#138661}.screenshot-toolbox-custom{visibility:hidden}"]
        }),
        tslib_1.__param(0, Inject(ScreenshotComponent)),
        tslib_1.__metadata("design:paramtypes", [ScreenshotComponent])
    ], ScreenshotToolboxComponent);
    return ScreenshotToolboxComponent;
}());
export { ScreenshotToolboxComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyZWVuc2hvdC10b29sYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nMi1zY3JlZW5zaG90LyIsInNvdXJjZXMiOlsibGliL3NjcmVlbnNob3QtdG9vbGJveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBaUIsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTdEOztHQUVHO0FBb0JIO0lBR0ksb0NBQWdELE1BQTJCO1FBQTNCLFdBQU0sR0FBTixNQUFNLENBQXFCO1FBRDNFLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFFZixrR0FBa0c7UUFDbEcsd0NBQXdDO1FBQ3hDLDZCQUE2QjtJQUNqQyxDQUFDO0lBRUQsMkNBQU0sR0FBTjtRQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVELDZDQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxvREFBZSxHQUFmO1FBQUEsaUJBSUM7UUFIRyxNQUFNLENBQUMsVUFBVSxDQUFDO1lBQ2QsS0FBSSxDQUFDLFVBQVUsR0FBRyxLQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNyRSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQWxCdUQsbUJBQW1CLHVCQUE5RCxNQUFNLFNBQUMsbUJBQW1COztJQUZFO1FBQXhDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7MENBQVUsVUFBVTsrREFBQztJQURwRCwwQkFBMEI7UUFuQnRDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSx3QkFBd0I7WUFDbEMsUUFBUSxFQUFFLHlnQkFjVDs7U0FFSixDQUFDO1FBSWUsbUJBQUEsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUE7aURBQWdCLG1CQUFtQjtPQUhsRSwwQkFBMEIsQ0FzQnRDO0lBQUQsaUNBQUM7Q0FBQSxBQXRCRCxJQXNCQztTQXRCWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIFZpZXdDaGlsZCwgQWZ0ZXJWaWV3SW5pdCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFNjcmVlbnNob3RDb21wb25lbnQgfSBmcm9tICcuL3NjcmVlbnNob3QuY29tcG9uZW50JztcclxuXHJcbi8qKlxyXG4gKiBDdXN0b20gdGVtcGxhdGUgb2Ygc2NyZWVuc2hvdCB0b29sYm94LCBjb25uZW50IHdpdGggc2NyZWVuc2hvdFxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ25nMi1zY3JlZW5zaG90LXRvb2xib3gnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwic2NyZWVuc2hvdC10b29sYm94XCIgW2hpZGRlbl09XCIhcGFyZW50LnNob3dUb29sYm94XCI+XHJcbiAgICAgICAgICAgIDxkaXYgI3dyYXBwZXI+XHJcbiAgICAgICAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2ICpuZ0lmPVwiIWhhc0NvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG5cIiB0eXBlPVwiYnV0dG9uXCIgKGNsaWNrKT1cImNhbmNlbCgpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgQ2FuY2VsXHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG5cIiB0eXBlPVwiYnV0dG9uXCIgKGNsaWNrKT1cImRvd25sb2FkKClcIj5cclxuICAgICAgICAgICAgICAgICAgICBEb3dubG9hZFxyXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgYCxcclxuICAgIHN0eWxlVXJsczogWycuL3NjcmVlbnNob3QtdG9vbGJveC5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTY3JlZW5zaG90VG9vbGJveENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xyXG4gICAgQFZpZXdDaGlsZCgnd3JhcHBlcicsIHsgc3RhdGljOiBmYWxzZSB9KSB3cmFwcGVyOiBFbGVtZW50UmVmO1xyXG4gICAgaGFzQ29udGVudCA9IGZhbHNlO1xyXG4gICAgY29uc3RydWN0b3IoQEluamVjdChTY3JlZW5zaG90Q29tcG9uZW50KSBwdWJsaWMgcGFyZW50OiBTY3JlZW5zaG90Q29tcG9uZW50KSB7XHJcbiAgICAgICAgLy8gY29uc3QgdGVtcGxhdGUgPSBgPGRpdiBjbGFzcz1cInNjcmVlbnNob3QtdG9vbGJveFwiPiR7ZWwubmF0aXZlRWxlbWVudC5jaGlsZHJlbigpLmh0bWwoKX08L2Rpdj5gO1xyXG4gICAgICAgIC8vIHJlbmRlcmVyLnNlbGVjdFJvb3RFbGVtZW50KHRlbXBsYXRlKTtcclxuICAgICAgICAvLyBlbC5uYXRpdmVFbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbmNlbCgpIHtcclxuICAgICAgICB0aGlzLnBhcmVudC5jYW5jZWwoKTtcclxuICAgIH1cclxuXHJcbiAgICBkb3dubG9hZCgpIHtcclxuICAgICAgICB0aGlzLnBhcmVudC5kb3dubG9hZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFzQ29udGVudCA9IHRoaXMud3JhcHBlci5uYXRpdmVFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19