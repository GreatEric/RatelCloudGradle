'use strict';
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
var DOMProcess = /** @class */ (function () {
    function DOMProcess() {
        this.domURL = window.URL;
        this.imageType = 'image/png';
    }
    DOMProcess.prototype.appendToBody = function (element) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                document.body.appendChild(element);
                return [2 /*return*/, element];
            });
        });
    };
    DOMProcess.prototype.canvasToImage = function (canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var url;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = canvas.toDataURL(this.imageType);
                        return [4 /*yield*/, this.dataUrlToImage(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DOMProcess.prototype.clearCanvasRect = function (canvas) {
        var context = canvas.getContext('2d');
        context.clearRect(0, 0, canvas.width, canvas.height);
    };
    DOMProcess.prototype.dataUrlToImage = function (url) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var image = new Image();
                        image.onload = function () {
                            resolve(image);
                        };
                        image.onerror = reject;
                        image.src = url;
                    })];
            });
        });
    };
    DOMProcess.prototype.clipImageToCanvas = function (image, clipStartX, clipStartY, clipWidth, clipHeight) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var canvas, context;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createCanvas(Math.abs(clipWidth), Math.abs(clipHeight))];
                    case 1:
                        canvas = _a.sent();
                        context = canvas.getContext('2d');
                        context.drawImage(image, clipStartX, clipStartY, clipWidth, clipHeight, 0, 0, canvas.width, canvas.height);
                        this.remove(image);
                        return [2 /*return*/, canvas];
                }
            });
        });
    };
    DOMProcess.prototype.createCanvas = function (width, height) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var canvas;
            return tslib_1.__generator(this, function (_a) {
                canvas = document.createElement('canvas');
                canvas.width = width;
                canvas.height = height;
                return [2 /*return*/, canvas];
            });
        });
    };
    DOMProcess.prototype.downloadByUrl = function (url, filename) {
        var downloadLink = document.createElement('a');
        downloadLink.href = url;
        downloadLink.download = filename;
        downloadLink.target = '_blank';
        downloadLink.click();
        downloadLink.remove();
        this.domURL.revokeObjectURL(url);
    };
    DOMProcess.prototype.downloadCanvas = function (canvas, filename) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var downloadUrl;
            return tslib_1.__generator(this, function (_a) {
                downloadUrl = canvas.toDataURL(this.imageType);
                this.downloadByUrl(downloadUrl, filename);
                return [2 /*return*/, canvas];
            });
        });
    };
    DOMProcess.prototype.getStyle = function (element, property) {
        var styles = window.getComputedStyle(element);
        return styles[property];
    };
    DOMProcess.prototype.remove = function (element) {
        if (element) {
            element.remove();
        }
        element = null;
    };
    DOMProcess.prototype.isTransparent = function (element) {
        var backgroundColor = window.getComputedStyle(element).backgroundColor;
        return backgroundColor === 'transparent' || backgroundColor === '' || backgroundColor === 'rgba(0, 0, 0, 0)';
    };
    DOMProcess.prototype.listenInteractiveCanvas = function (canvas, rectBackground, mouseupListener, mousedownListener, contextmenuListener) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var context, rect, dragging, draw, mousedown, mousemove, mouseup, contextmenu, touchStart, touched, touchMove;
            return tslib_1.__generator(this, function (_a) {
                context = canvas.getContext('2d');
                rect = {
                    startX: 0,
                    startY: 0,
                    w: 0,
                    h: 0
                };
                dragging = false;
                draw = function () {
                    context.beginPath();
                    context.fillStyle = rectBackground;
                    context.fillRect(rect.startX, rect.startY, rect.w, rect.h);
                    context.closePath();
                };
                mousedown = function (e) {
                    context.clearRect(0, 0, canvas.width, canvas.height);
                    rect.startX = e.pageX - canvas.offsetLeft;
                    rect.startY = e.pageY - canvas.offsetTop;
                    mousedownListener(rect);
                    rect.w = 0;
                    rect.h = 0;
                    dragging = true;
                };
                mousemove = function (e) {
                    if (dragging) {
                        rect.w = e.pageX - canvas.offsetLeft - rect.startX;
                        rect.h = e.pageY - canvas.offsetTop - rect.startY;
                        context.clearRect(0, 0, canvas.width, canvas.height);
                        draw();
                    }
                };
                mouseup = function () {
                    dragging = false;
                    mouseupListener(canvas, rect);
                };
                contextmenu = function (e) {
                    contextmenuListener();
                    e.preventDefault();
                    return false;
                };
                touchStart = function (e) {
                    e.preventDefault();
                    var touch = e.changedTouches[0];
                    var mouseEvent = new MouseEvent('mousedown', {
                        clientX: touch.pageX,
                        clientY: touch.pageY
                    });
                    canvas.dispatchEvent(mouseEvent);
                };
                touched = function () {
                    var mouseEvent = new MouseEvent('mouseup', {});
                    canvas.dispatchEvent(mouseEvent);
                };
                touchMove = function (e) {
                    e.preventDefault();
                    var touch = e.changedTouches[0];
                    var mouseEvent = new MouseEvent('mousemove', {
                        clientX: touch.pageX,
                        clientY: touch.pageY
                    });
                    canvas.dispatchEvent(mouseEvent);
                };
                canvas.addEventListener('mousedown', mousedown, false);
                canvas.addEventListener('mouseup', mouseup, false);
                canvas.addEventListener('mousemove', mousemove, false);
                canvas.addEventListener('touchstart', touchStart, false);
                canvas.addEventListener('touchend', touched, false);
                canvas.addEventListener('touchmove', touchMove, false);
                canvas.addEventListener('contextmenu', contextmenu, false);
                document.body.addEventListener('touchmove', function (event) { return event.preventDefault(); }, false);
                return [2 /*return*/, canvas];
            });
        });
    };
    DOMProcess.prototype.setCanvasStyle = function (canvas, left, top, background, zIndex) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                canvas.style.cursor = 'crosshair';
                canvas.style.position = 'absolute';
                canvas.style.left = left + 'px';
                canvas.style.top = top + 'px';
                canvas.style.background = background;
                canvas.style.zIndex = zIndex;
                canvas.style.opacity = '0.5';
                return [2 /*return*/, canvas];
            });
        });
    };
    DOMProcess.prototype.setToolboxPositionStyle = function (toolboxElement, left, top) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                toolboxElement.style.left = left + 'px';
                toolboxElement.style.top = top + 'px';
                return [2 /*return*/, toolboxElement];
            });
        });
    };
    DOMProcess.prototype.setToolboxStackStyle = function (toolboxElement, zIndex) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                toolboxElement.style.position = 'absolute';
                toolboxElement.style.zIndex = zIndex;
                return [2 /*return*/, toolboxElement];
            });
        });
    };
    DOMProcess = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], DOMProcess);
    return DOMProcess;
}());
export { DOMProcess };
//# sourceMappingURL=data:application/json;base64,