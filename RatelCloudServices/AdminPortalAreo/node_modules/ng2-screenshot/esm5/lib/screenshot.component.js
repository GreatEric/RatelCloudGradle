import * as tslib_1 from "tslib";
import { Component, Input, Inject, forwardRef, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';
import { Colors, HightLevelZindex, ToolboxDefaultOptions } from './screenshot.class';
import { DOMProcess } from './screenshot.utils';
import domtoimage from 'dom-to-image';
import * as jq from 'jquery';
var $ = jq;
/**
 * Capture dom setion with indicate element
 */
var ScreenshotComponent = /** @class */ (function () {
    function ScreenshotComponent(colors, hightLevelZindex, defaultOptions, domprocess) {
        var _this = this;
        this.colors = colors;
        this.hightLevelZindex = hightLevelZindex;
        this.defaultOptions = defaultOptions;
        this.domprocess = domprocess;
        this.isOpenChange = new EventEmitter();
        this.api = new EventEmitter();
        this.showToolbox = false;
        this.cancelText = 'Cancel';
        this.downloadText = 'Download';
        this.filename = 'screenshot.png';
        this.toolboxMargin = 5;
        this.calculateToolboxPosition = function (offsetLeft, offsetTop, rect, toolboxWidth, toolboxHeight) {
            var left = offsetLeft + rect.startX + rect.w;
            var top = offsetTop + rect.startY + rect.h;
            if (rect.w >= 0) {
                left -= toolboxWidth;
            }
            if (rect.h >= 0) {
                top += _this.toolboxMargin;
            }
            else {
                top = top - toolboxHeight - _this.toolboxMargin;
            }
            return {
                left: left,
                top: top
            };
        };
        this.cancel = function () {
            _this.showToolbox = false;
            _this.domprocess.clearCanvasRect(_this.interactiveCanvas);
        };
        this.download = function () {
            _this.isOpenChange.emit(false);
            window.setTimeout(function () {
                var elementSelector = _this.getElementSelector();
                var element = elementSelector[0];
                var options = _this.getOptions(element);
                domtoimage
                    .toPng(element, options)
                    .then(_this.domprocess.dataUrlToImage)
                    .then(function (image) {
                    _this.domprocess.remove(image);
                    return _this.domprocess.clipImageToCanvas(image, _this.rect.startX, _this.rect.startY, _this.rect.w, _this.rect.h);
                })
                    .then(function (canvas) { return _this.domprocess.downloadCanvas(canvas, _this.toolboxOptions.filename); })
                    .then(_this.domprocess.remove)
                    .catch(function (error) { return console.error(error); });
            });
        };
        this.downloadFull = function () {
            _this.isOpenChange.emit(false);
            window.setTimeout(function () {
                var elementSelector = _this.getElementSelector();
                var element = elementSelector[0];
                var options = _this.getOptions(element);
                domtoimage
                    .toPng(element, options)
                    .then(function (imageUrl) { return _this.domprocess.downloadByUrl(imageUrl, _this.toolboxOptions.filename); })
                    .catch(function (error) { return console.error(error); });
            });
        };
        this.findMaxZindex = function () {
            var zMax = 0;
            $('body *').each(function () {
                var zIndexStr = $(this).css('zIndex');
                var zIndex = parseInt(zIndexStr, 10);
                if (zIndex && zIndex > zMax) {
                    zMax = zIndex;
                }
            });
            return zMax;
        };
        this.getElementSelector = function () {
            return _this.target
                ? $(_this.target)
                : $(_this.container.nativeElement).filter(function (index, element) {
                    var elementName = element.tagName.toLowerCase();
                    return elementName !== 'screenshot-toolbox';
                });
        };
        this.getOptions = function (element) {
            var boudingClientRect = element.getBoundingClientRect();
            var options = {
                width: boudingClientRect.width,
                height: boudingClientRect.height
            };
            if (_this.domprocess.isTransparent(element)) {
                var parentBackgroundColor = _this.domprocess.getStyle(element, 'backgroundColor');
                options = Object.assign({}, options, { bgcolor: parentBackgroundColor });
            }
            return options;
        };
        this.setHightLevelZindex = function () {
            var maxZindex = _this.findMaxZindex();
            _this.hightLevelZindex.second = maxZindex + 1;
            _this.hightLevelZindex.top = _this.hightLevelZindex.second + 1;
        };
        this.toPng = function (callback) {
            return new Promise(function (resolve, reject) {
                _this.isOpenChange.emit(false);
                window.setTimeout(function () {
                    var elementSelector = _this.getElementSelector();
                    var element = elementSelector[0];
                    var options = _this.getOptions(element);
                    return domtoimage
                        .toPng(element, options)
                        .then(_this.domprocess.dataUrlToImage)
                        .then(function (image) {
                        _this.domprocess.remove(image);
                        return _this.domprocess.clipImageToCanvas(image, _this.rect.startX, _this.rect.startY, _this.rect.w, _this.rect.h);
                    })
                        .then(function (canvas) {
                        var url = canvas.toDataURL('image/png');
                        if (callback) {
                            callback(url);
                        }
                        resolve(url);
                    })
                        .catch(function (error) {
                        console.error(error);
                        reject(error);
                    });
                });
            });
        };
        this.canvasMousedownListener = function () {
            _this.showToolbox = false;
        };
        this.canvasMouseupListener = function (canvas, rect) {
            if (rect.w !== 0 && rect.h !== 0) {
                // this.showToolbox = false;
                _this.rect = rect;
                var toolbox = $(_this.container.nativeElement).find('ng2-screenshot-toolbox');
                console.log(toolbox.outerWidth());
                // console.log(toolbox.width())
                // // const toolbox = $('ng2-screenshot-toolbox');
                var toolboxElement = toolbox.get(0);
                console.log(toolboxElement.clientWidth);
                console.log(_this.hightLevelZindex);
                /**
                 * toolbox position setting
                 * because read elememt's width sould indicated postion method, so we set position method first then move location with dom.
                 */
                _this.domprocess
                    .setToolboxStackStyle(toolboxElement, _this.hightLevelZindex.top.toString())
                    // .then(this.domprocess.appendToBody)
                    .then(function (element) {
                    var position = _this.calculateToolboxPosition(canvas.offsetLeft, canvas.offsetTop, rect, element.offsetWidth, element.offsetHeight);
                    return _this.domprocess.setToolboxPositionStyle(element, position.left, position.top);
                })
                    .then(function (element) {
                    _this.showToolbox = true;
                });
            }
        };
        this.canvasContextmenuListener = function () {
            _this.isOpenChange.emit(false);
        };
        this.closeScreenshot = function () {
            _this.domprocess.remove(_this.interactiveCanvas);
            _this.showToolbox = false;
        };
        this.resizeCanvas = function () {
            if (!_this.interactiveCanvas) {
                return;
            }
            var elementSelector = _this.getElementSelector();
            var boudingClientRect = elementSelector[0].getBoundingClientRect();
            var width = boudingClientRect.width;
            var height = boudingClientRect.height;
            var offset = elementSelector.offset();
            var left = offset.left;
            var top = offset.top;
            _this.interactiveCanvas.width = width;
            _this.interactiveCanvas.height = height;
            _this.domprocess
                .setCanvasStyle(_this.interactiveCanvas, left, top, _this.colors.gray, _this.hightLevelZindex.second.toString())
                .then(function () { return _this.showToolbox = false; });
        };
    }
    ScreenshotComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.toolboxOptions) {
            this.toolboxOptions = {
                filename: this.defaultOptions.filename,
                cancelText: this.defaultOptions.cancelText,
                downloadText: this.defaultOptions.downloadText
            };
        }
        this.api.emit({
            cancel: this.cancel,
            download: this.download,
            downloadFull: this.downloadFull,
            toPng: this.toPng
        });
        window.onresize = function () {
            _this.resizeCanvas();
        };
    };
    ScreenshotComponent.prototype.ngOnChanges = function (item) {
        var isOpen = item.isOpen, toolboxOptions = item.toolboxOptions;
        switch (isOpen.currentValue) {
            case true:
                this.openScreenshot();
                break;
            case false:
                this.closeScreenshot();
                break;
            default:
                this.closeScreenshot();
                break;
        }
        if (toolboxOptions) {
            this.cancelText = toolboxOptions.cancelText ? toolboxOptions.cancelText : this.cancelText;
            this.downloadText = toolboxOptions.downloadText ? toolboxOptions.downloadText : this.downloadText;
            this.filename = toolboxOptions.filename ? toolboxOptions.filename : this.filename;
        }
    };
    ScreenshotComponent.prototype.openScreenshot = function () {
        var _this = this;
        var elementSelector = this.getElementSelector();
        var boudingClientRect = elementSelector[0].getBoundingClientRect();
        var width = boudingClientRect.width;
        var height = boudingClientRect.height;
        var offset = elementSelector.offset();
        var left = offset.left;
        var top = offset.top;
        this.setHightLevelZindex();
        this.domprocess
            .createCanvas(width, height)
            .then(function (canvas) {
            return _this.domprocess.setCanvasStyle(canvas, left, top, _this.colors.gray, _this.hightLevelZindex.second.toString());
        })
            .then(this.domprocess.appendToBody)
            .then(function (canvas) {
            return _this.domprocess.listenInteractiveCanvas(canvas, _this.colors.lightGray, _this.canvasMouseupListener, _this.canvasMousedownListener, _this.canvasContextmenuListener);
        })
            .then(function (canvas) { return (_this.interactiveCanvas = canvas); });
    };
    ScreenshotComponent.ctorParameters = function () { return [
        { type: Colors, decorators: [{ type: Inject, args: [forwardRef(function () { return Colors; }),] }] },
        { type: HightLevelZindex, decorators: [{ type: Inject, args: [forwardRef(function () { return HightLevelZindex; }),] }] },
        { type: ToolboxDefaultOptions, decorators: [{ type: Inject, args: [forwardRef(function () { return ToolboxDefaultOptions; }),] }] },
        { type: DOMProcess, decorators: [{ type: Inject, args: [forwardRef(function () { return DOMProcess; }),] }] }
    ]; };
    tslib_1.__decorate([
        ViewChild('container', { static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], ScreenshotComponent.prototype, "container", void 0);
    tslib_1.__decorate([
        Input('target'),
        tslib_1.__metadata("design:type", String)
    ], ScreenshotComponent.prototype, "target", void 0);
    tslib_1.__decorate([
        Input('isOpen'),
        tslib_1.__metadata("design:type", Boolean)
    ], ScreenshotComponent.prototype, "isOpen", void 0);
    tslib_1.__decorate([
        Input('toolboxOptions'),
        tslib_1.__metadata("design:type", Object)
    ], ScreenshotComponent.prototype, "toolboxOptions", void 0);
    tslib_1.__decorate([
        Output('isOpenChange'),
        tslib_1.__metadata("design:type", Object)
    ], ScreenshotComponent.prototype, "isOpenChange", void 0);
    tslib_1.__decorate([
        Output('apiInitialized'),
        tslib_1.__metadata("design:type", Object)
    ], ScreenshotComponent.prototype, "api", void 0);
    ScreenshotComponent = tslib_1.__decorate([
        Component({
            selector: 'ng2-screenshot',
            template: '<div #container><ng-content></ng-content></div>'
        }),
        tslib_1.__param(0, Inject(forwardRef(function () { return Colors; }))),
        tslib_1.__param(1, Inject(forwardRef(function () { return HightLevelZindex; }))),
        tslib_1.__param(2, Inject(forwardRef(function () { return ToolboxDefaultOptions; }))),
        tslib_1.__param(3, Inject(forwardRef(function () { return DOMProcess; }))),
        tslib_1.__metadata("design:paramtypes", [Colors,
            HightLevelZindex,
            ToolboxDefaultOptions,
            DOMProcess])
    ], ScreenshotComponent);
    return ScreenshotComponent;
}());
export { ScreenshotComponent };
//# sourceMappingURL=data:application/json;base64,