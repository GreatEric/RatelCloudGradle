import { __decorate, __awaiter, __metadata, __param } from 'tslib';
import { CommonModule } from '@angular/common';
import { Injectable, EventEmitter, Inject, forwardRef, ViewChild, ElementRef, Input, Output, Component, NgModule } from '@angular/core';
import domtoimage from 'dom-to-image';
import * as jq from 'jquery';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["container"];
const _c1 = ["*"];
const _c2 = ["wrapper"];
function ScreenshotToolboxComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r1684 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "button", 3);
    ɵngcc0.ɵɵlistener("click", function ScreenshotToolboxComponent_div_4_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r1684); const ctx_r1683 = ɵngcc0.ɵɵnextContext(); return ctx_r1683.cancel(); });
    ɵngcc0.ɵɵtext(2, " Cancel ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 3);
    ɵngcc0.ɵɵlistener("click", function ScreenshotToolboxComponent_div_4_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r1684); const ctx_r1685 = ɵngcc0.ɵɵnextContext(); return ctx_r1685.download(); });
    ɵngcc0.ɵɵtext(4, " Download ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
let ToolboxDefaultOptions = class ToolboxDefaultOptions {
    constructor() {
        this.filename = 'screenshot.png';
        this.cancelText = 'Cancel';
        this.downloadText = 'Download';
    }
};
ToolboxDefaultOptions.ɵfac = function ToolboxDefaultOptions_Factory(t) { return new (t || ToolboxDefaultOptions)(); };
ToolboxDefaultOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ToolboxDefaultOptions, factory: ToolboxDefaultOptions.ɵfac });
let Colors = class Colors {
    constructor() {
        this.gray = '#898b89';
        this.lightGray = '#e6e3e3';
    }
};
Colors.ɵfac = function Colors_Factory(t) { return new (t || Colors)(); };
Colors.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Colors, factory: Colors.ɵfac });
let HightLevelZindex = class HightLevelZindex {
    constructor() {
        this.top = 1;
        this.second = 0;
    }
};
HightLevelZindex.ɵfac = function HightLevelZindex_Factory(t) { return new (t || HightLevelZindex)(); };
HightLevelZindex.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HightLevelZindex, factory: HightLevelZindex.ɵfac });

'use strict';
let DOMProcess = class DOMProcess {
    constructor() {
        this.domURL = window.URL;
        this.imageType = 'image/png';
    }
    appendToBody(element) {
        return __awaiter(this, void 0, void 0, function* () {
            document.body.appendChild(element);
            return element;
        });
    }
    canvasToImage(canvas) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = canvas.toDataURL(this.imageType);
            return yield this.dataUrlToImage(url);
        });
    }
    clearCanvasRect(canvas) {
        const context = canvas.getContext('2d');
        context.clearRect(0, 0, canvas.width, canvas.height);
    }
    dataUrlToImage(url) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const image = new Image();
                image.onload = () => {
                    resolve(image);
                };
                image.onerror = reject;
                image.src = url;
            });
        });
    }
    clipImageToCanvas(image, clipStartX, clipStartY, clipWidth, clipHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            const canvas = yield this.createCanvas(Math.abs(clipWidth), Math.abs(clipHeight));
            const context = canvas.getContext('2d');
            context.drawImage(image, clipStartX, clipStartY, clipWidth, clipHeight, 0, 0, canvas.width, canvas.height);
            this.remove(image);
            return canvas;
        });
    }
    createCanvas(width, height) {
        return __awaiter(this, void 0, void 0, function* () {
            const canvas = document.createElement('canvas');
            canvas.width = width;
            canvas.height = height;
            return canvas;
        });
    }
    downloadByUrl(url, filename) {
        const downloadLink = document.createElement('a');
        downloadLink.href = url;
        downloadLink.download = filename;
        downloadLink.target = '_blank';
        downloadLink.click();
        downloadLink.remove();
        this.domURL.revokeObjectURL(url);
    }
    downloadCanvas(canvas, filename) {
        return __awaiter(this, void 0, void 0, function* () {
            const downloadUrl = canvas.toDataURL(this.imageType);
            this.downloadByUrl(downloadUrl, filename);
            return canvas;
        });
    }
    getStyle(element, property) {
        const styles = window.getComputedStyle(element);
        return styles[property];
    }
    remove(element) {
        if (element) {
            element.remove();
        }
        element = null;
    }
    isTransparent(element) {
        const backgroundColor = window.getComputedStyle(element).backgroundColor;
        return backgroundColor === 'transparent' || backgroundColor === '' || backgroundColor === 'rgba(0, 0, 0, 0)';
    }
    listenInteractiveCanvas(canvas, rectBackground, mouseupListener, mousedownListener, contextmenuListener) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = canvas.getContext('2d');
            const rect = {
                startX: 0,
                startY: 0,
                w: 0,
                h: 0
            };
            let dragging = false;
            const draw = () => {
                context.beginPath();
                context.fillStyle = rectBackground;
                context.fillRect(rect.startX, rect.startY, rect.w, rect.h);
                context.closePath();
            };
            const mousedown = (e) => {
                context.clearRect(0, 0, canvas.width, canvas.height);
                rect.startX = e.pageX - canvas.offsetLeft;
                rect.startY = e.pageY - canvas.offsetTop;
                mousedownListener(rect);
                rect.w = 0;
                rect.h = 0;
                dragging = true;
            };
            const mousemove = (e) => {
                if (dragging) {
                    rect.w = e.pageX - canvas.offsetLeft - rect.startX;
                    rect.h = e.pageY - canvas.offsetTop - rect.startY;
                    context.clearRect(0, 0, canvas.width, canvas.height);
                    draw();
                }
            };
            const mouseup = () => {
                dragging = false;
                mouseupListener(canvas, rect);
            };
            const contextmenu = (e) => {
                contextmenuListener();
                e.preventDefault();
                return false;
            };
            const touchStart = (e) => {
                e.preventDefault();
                const touch = e.changedTouches[0];
                const mouseEvent = new MouseEvent('mousedown', {
                    clientX: touch.pageX,
                    clientY: touch.pageY
                });
                canvas.dispatchEvent(mouseEvent);
            };
            const touched = () => {
                const mouseEvent = new MouseEvent('mouseup', {});
                canvas.dispatchEvent(mouseEvent);
            };
            const touchMove = (e) => {
                e.preventDefault();
                const touch = e.changedTouches[0];
                const mouseEvent = new MouseEvent('mousemove', {
                    clientX: touch.pageX,
                    clientY: touch.pageY
                });
                canvas.dispatchEvent(mouseEvent);
            };
            canvas.addEventListener('mousedown', mousedown, false);
            canvas.addEventListener('mouseup', mouseup, false);
            canvas.addEventListener('mousemove', mousemove, false);
            canvas.addEventListener('touchstart', touchStart, false);
            canvas.addEventListener('touchend', touched, false);
            canvas.addEventListener('touchmove', touchMove, false);
            canvas.addEventListener('contextmenu', contextmenu, false);
            document.body.addEventListener('touchmove', event => event.preventDefault(), false);
            return canvas;
        });
    }
    setCanvasStyle(canvas, left, top, background, zIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            canvas.style.cursor = 'crosshair';
            canvas.style.position = 'absolute';
            canvas.style.left = left + 'px';
            canvas.style.top = top + 'px';
            canvas.style.background = background;
            canvas.style.zIndex = zIndex;
            canvas.style.opacity = '0.5';
            return canvas;
        });
    }
    setToolboxPositionStyle(toolboxElement, left, top) {
        return __awaiter(this, void 0, void 0, function* () {
            toolboxElement.style.left = left + 'px';
            toolboxElement.style.top = top + 'px';
            return toolboxElement;
        });
    }
    setToolboxStackStyle(toolboxElement, zIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            toolboxElement.style.position = 'absolute';
            toolboxElement.style.zIndex = zIndex;
            return toolboxElement;
        });
    }
};
DOMProcess.ɵfac = function DOMProcess_Factory(t) { return new (t || DOMProcess)(); };
DOMProcess.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DOMProcess, factory: DOMProcess.ɵfac });
DOMProcess = __decorate([ __metadata("design:paramtypes", [])
], DOMProcess);

const $ = jq;
/**
 * Capture dom setion with indicate element
 */
let ScreenshotComponent = class ScreenshotComponent {
    constructor(colors, hightLevelZindex, defaultOptions, domprocess) {
        this.colors = colors;
        this.hightLevelZindex = hightLevelZindex;
        this.defaultOptions = defaultOptions;
        this.domprocess = domprocess;
        this.isOpenChange = new EventEmitter();
        this.api = new EventEmitter();
        this.showToolbox = false;
        this.cancelText = 'Cancel';
        this.downloadText = 'Download';
        this.filename = 'screenshot.png';
        this.toolboxMargin = 5;
        this.calculateToolboxPosition = (offsetLeft, offsetTop, rect, toolboxWidth, toolboxHeight) => {
            let left = offsetLeft + rect.startX + rect.w;
            let top = offsetTop + rect.startY + rect.h;
            if (rect.w >= 0) {
                left -= toolboxWidth;
            }
            if (rect.h >= 0) {
                top += this.toolboxMargin;
            }
            else {
                top = top - toolboxHeight - this.toolboxMargin;
            }
            return {
                left,
                top
            };
        };
        this.cancel = () => {
            this.showToolbox = false;
            this.domprocess.clearCanvasRect(this.interactiveCanvas);
        };
        this.download = () => {
            this.isOpenChange.emit(false);
            window.setTimeout(() => {
                const elementSelector = this.getElementSelector();
                const element = elementSelector[0];
                const options = this.getOptions(element);
                domtoimage
                    .toPng(element, options)
                    .then(this.domprocess.dataUrlToImage)
                    .then((image) => {
                    this.domprocess.remove(image);
                    return this.domprocess.clipImageToCanvas(image, this.rect.startX, this.rect.startY, this.rect.w, this.rect.h);
                })
                    .then((canvas) => this.domprocess.downloadCanvas(canvas, this.toolboxOptions.filename))
                    .then(this.domprocess.remove)
                    .catch((error) => console.error(error));
            });
        };
        this.downloadFull = () => {
            this.isOpenChange.emit(false);
            window.setTimeout(() => {
                const elementSelector = this.getElementSelector();
                const element = elementSelector[0];
                const options = this.getOptions(element);
                domtoimage
                    .toPng(element, options)
                    .then((imageUrl) => this.domprocess.downloadByUrl(imageUrl, this.toolboxOptions.filename))
                    .catch((error) => console.error(error));
            });
        };
        this.findMaxZindex = () => {
            let zMax = 0;
            $('body *').each(function () {
                const zIndexStr = $(this).css('zIndex');
                const zIndex = parseInt(zIndexStr, 10);
                if (zIndex && zIndex > zMax) {
                    zMax = zIndex;
                }
            });
            return zMax;
        };
        this.getElementSelector = () => {
            return this.target
                ? $(this.target)
                : $(this.container.nativeElement).filter((index, element) => {
                    const elementName = element.tagName.toLowerCase();
                    return elementName !== 'screenshot-toolbox';
                });
        };
        this.getOptions = (element) => {
            const boudingClientRect = element.getBoundingClientRect();
            let options = {
                width: boudingClientRect.width,
                height: boudingClientRect.height
            };
            if (this.domprocess.isTransparent(element)) {
                const parentBackgroundColor = this.domprocess.getStyle(element, 'backgroundColor');
                options = Object.assign({}, options, { bgcolor: parentBackgroundColor });
            }
            return options;
        };
        this.setHightLevelZindex = () => {
            const maxZindex = this.findMaxZindex();
            this.hightLevelZindex.second = maxZindex + 1;
            this.hightLevelZindex.top = this.hightLevelZindex.second + 1;
        };
        this.toPng = (callback) => new Promise((resolve, reject) => {
            this.isOpenChange.emit(false);
            window.setTimeout(() => {
                const elementSelector = this.getElementSelector();
                const element = elementSelector[0];
                const options = this.getOptions(element);
                return domtoimage
                    .toPng(element, options)
                    .then(this.domprocess.dataUrlToImage)
                    .then((image) => {
                    this.domprocess.remove(image);
                    return this.domprocess.clipImageToCanvas(image, this.rect.startX, this.rect.startY, this.rect.w, this.rect.h);
                })
                    .then((canvas) => {
                    const url = canvas.toDataURL('image/png');
                    if (callback) {
                        callback(url);
                    }
                    resolve(url);
                })
                    .catch((error) => {
                    console.error(error);
                    reject(error);
                });
            });
        });
        this.canvasMousedownListener = () => {
            this.showToolbox = false;
        };
        this.canvasMouseupListener = (canvas, rect) => {
            if (rect.w !== 0 && rect.h !== 0) {
                // this.showToolbox = false;
                this.rect = rect;
                const toolbox = $(this.container.nativeElement).find('ng2-screenshot-toolbox');
                console.log(toolbox.outerWidth());
                // console.log(toolbox.width())
                // // const toolbox = $('ng2-screenshot-toolbox');
                const toolboxElement = toolbox.get(0);
                console.log(toolboxElement.clientWidth);
                console.log(this.hightLevelZindex);
                /**
                 * toolbox position setting
                 * because read elememt's width sould indicated postion method, so we set position method first then move location with dom.
                 */
                this.domprocess
                    .setToolboxStackStyle(toolboxElement, this.hightLevelZindex.top.toString())
                    // .then(this.domprocess.appendToBody)
                    .then(element => {
                    const position = this.calculateToolboxPosition(canvas.offsetLeft, canvas.offsetTop, rect, element.offsetWidth, element.offsetHeight);
                    return this.domprocess.setToolboxPositionStyle(element, position.left, position.top);
                })
                    .then(element => {
                    this.showToolbox = true;
                });
            }
        };
        this.canvasContextmenuListener = () => {
            this.isOpenChange.emit(false);
        };
        this.closeScreenshot = () => {
            this.domprocess.remove(this.interactiveCanvas);
            this.showToolbox = false;
        };
        this.resizeCanvas = () => {
            if (!this.interactiveCanvas) {
                return;
            }
            const elementSelector = this.getElementSelector();
            const boudingClientRect = elementSelector[0].getBoundingClientRect();
            const width = boudingClientRect.width;
            const height = boudingClientRect.height;
            const offset = elementSelector.offset();
            const left = offset.left;
            const top = offset.top;
            this.interactiveCanvas.width = width;
            this.interactiveCanvas.height = height;
            this.domprocess
                .setCanvasStyle(this.interactiveCanvas, left, top, this.colors.gray, this.hightLevelZindex.second.toString())
                .then(() => this.showToolbox = false);
        };
    }
    ngOnInit() {
        if (!this.toolboxOptions) {
            this.toolboxOptions = {
                filename: this.defaultOptions.filename,
                cancelText: this.defaultOptions.cancelText,
                downloadText: this.defaultOptions.downloadText
            };
        }
        this.api.emit({
            cancel: this.cancel,
            download: this.download,
            downloadFull: this.downloadFull,
            toPng: this.toPng
        });
        window.onresize = () => {
            this.resizeCanvas();
        };
    }
    ngOnChanges(item) {
        const { isOpen, toolboxOptions } = item;
        switch (isOpen.currentValue) {
            case true:
                this.openScreenshot();
                break;
            case false:
                this.closeScreenshot();
                break;
            default:
                this.closeScreenshot();
                break;
        }
        if (toolboxOptions) {
            this.cancelText = toolboxOptions.cancelText ? toolboxOptions.cancelText : this.cancelText;
            this.downloadText = toolboxOptions.downloadText ? toolboxOptions.downloadText : this.downloadText;
            this.filename = toolboxOptions.filename ? toolboxOptions.filename : this.filename;
        }
    }
    openScreenshot() {
        const elementSelector = this.getElementSelector();
        const boudingClientRect = elementSelector[0].getBoundingClientRect();
        const width = boudingClientRect.width;
        const height = boudingClientRect.height;
        const offset = elementSelector.offset();
        const left = offset.left;
        const top = offset.top;
        this.setHightLevelZindex();
        this.domprocess
            .createCanvas(width, height)
            .then(canvas => this.domprocess.setCanvasStyle(canvas, left, top, this.colors.gray, this.hightLevelZindex.second.toString()))
            .then(this.domprocess.appendToBody)
            .then(canvas => this.domprocess.listenInteractiveCanvas(canvas, this.colors.lightGray, this.canvasMouseupListener, this.canvasMousedownListener, this.canvasContextmenuListener))
            .then(canvas => (this.interactiveCanvas = canvas));
    }
};
ScreenshotComponent.ɵfac = function ScreenshotComponent_Factory(t) { return new (t || ScreenshotComponent)(ɵngcc0.ɵɵdirectiveInject(forwardRef(() => Colors)), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => HightLevelZindex)), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => ToolboxDefaultOptions)), ɵngcc0.ɵɵdirectiveInject(forwardRef(() => DOMProcess))); };
ScreenshotComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ScreenshotComponent, selectors: [["ng2-screenshot"]], viewQuery: function ScreenshotComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
    } }, inputs: { toolboxOptions: "toolboxOptions", target: "target", isOpen: "isOpen" }, outputs: { isOpenChange: "isOpenChange", api: "apiInitialized" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 3, vars: 0, consts: [["container", ""]], template: function ScreenshotComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", null, 0);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
ScreenshotComponent.ctorParameters = () => [
    { type: Colors, decorators: [{ type: Inject, args: [forwardRef(() => Colors),] }] },
    { type: HightLevelZindex, decorators: [{ type: Inject, args: [forwardRef(() => HightLevelZindex),] }] },
    { type: ToolboxDefaultOptions, decorators: [{ type: Inject, args: [forwardRef(() => ToolboxDefaultOptions),] }] },
    { type: DOMProcess, decorators: [{ type: Inject, args: [forwardRef(() => DOMProcess),] }] }
];
__decorate([
    ViewChild('container', { static: false }),
    __metadata("design:type", ElementRef)
], ScreenshotComponent.prototype, "container", void 0);
__decorate([
    Input('target'),
    __metadata("design:type", String)
], ScreenshotComponent.prototype, "target", void 0);
__decorate([
    Input('isOpen'),
    __metadata("design:type", Boolean)
], ScreenshotComponent.prototype, "isOpen", void 0);
__decorate([
    Input('toolboxOptions'),
    __metadata("design:type", Object)
], ScreenshotComponent.prototype, "toolboxOptions", void 0);
__decorate([
    Output('isOpenChange'),
    __metadata("design:type", Object)
], ScreenshotComponent.prototype, "isOpenChange", void 0);
__decorate([
    Output('apiInitialized'),
    __metadata("design:type", Object)
], ScreenshotComponent.prototype, "api", void 0);
ScreenshotComponent = __decorate([ __param(0, Inject(forwardRef(() => Colors))),
    __param(1, Inject(forwardRef(() => HightLevelZindex))),
    __param(2, Inject(forwardRef(() => ToolboxDefaultOptions))),
    __param(3, Inject(forwardRef(() => DOMProcess))),
    __metadata("design:paramtypes", [Colors,
        HightLevelZindex,
        ToolboxDefaultOptions,
        DOMProcess])
], ScreenshotComponent);

/**
 * Custom template of screenshot toolbox, connent with screenshot
 */
let ScreenshotToolboxComponent = class ScreenshotToolboxComponent {
    constructor(parent) {
        this.parent = parent;
        this.hasContent = false;
        // const template = `<div class="screenshot-toolbox">${el.nativeElement.children().html()}</div>`;
        // renderer.selectRootElement(template);
        // el.nativeElement.remove();
    }
    cancel() {
        this.parent.cancel();
    }
    download() {
        this.parent.download();
    }
    ngAfterViewInit() {
        window.setTimeout(() => {
            this.hasContent = this.wrapper.nativeElement.children.length > 0;
        });
    }
};
ScreenshotToolboxComponent.ɵfac = function ScreenshotToolboxComponent_Factory(t) { return new (t || ScreenshotToolboxComponent)(ɵngcc0.ɵɵdirectiveInject(ScreenshotComponent)); };
ScreenshotToolboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ScreenshotToolboxComponent, selectors: [["ng2-screenshot-toolbox"]], viewQuery: function ScreenshotToolboxComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c2, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wrapper = _t.first);
    } }, ngContentSelectors: _c1, decls: 5, vars: 2, consts: [[1, "screenshot-toolbox", 3, "hidden"], ["wrapper", ""], [4, "ngIf"], ["type", "button", 1, "btn", 3, "click"]], template: function ScreenshotToolboxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", null, 1);
        ɵngcc0.ɵɵprojection(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, ScreenshotToolboxComponent_div_4_Template, 5, 0, "div", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("hidden", !ctx.parent.showToolbox);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hasContent);
    } }, directives: [ɵngcc1.NgIf], styles: [".screenshot-toolbox[_ngcontent-%COMP%]{width:100%}.screenshot-toolbox[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin:.2em}.screenshot-toolbox[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{position:relative;padding:.2em .4em;overflow:hidden;border-width:0;outline:0;border-radius:.2em;box-shadow:0 .1em .2em #4f4f4f;background-color:#e6e3e3;color:#4f4f4f;-webkit-transition:background-color .3s;transition:background-color .3s}.screenshot-toolbox[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]:focus, .screenshot-toolbox[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]:hover{background:#cdcccc}.screenshot-toolbox[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{position:relative}.screenshot-toolbox[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]:before{content:\"\";position:absolute;top:50%;left:50%;display:block;width:0;padding-top:0;border-radius:100%;background-color:rgba(205,204,204,.3);-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.screenshot-toolbox[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]:active:before{width:120%;padding-top:120%;-webkit-transition:width .2s ease-out,padding-top .2s ease-out;transition:width .2s ease-out,padding-top .2s ease-out}.screenshot-toolbox[_ngcontent-%COMP%]   .btn-navy[_ngcontent-%COMP%]{background-color:#1d9e74}.screenshot-toolbox[_ngcontent-%COMP%]   .btn-navy[_ngcontent-%COMP%]:focus, .screenshot-toolbox[_ngcontent-%COMP%]   .btn-navy[_ngcontent-%COMP%]:hover{background-color:#138661}.screenshot-toolbox-custom[_ngcontent-%COMP%]{visibility:hidden}"] });
ScreenshotToolboxComponent.ctorParameters = () => [
    { type: ScreenshotComponent, decorators: [{ type: Inject, args: [ScreenshotComponent,] }] }
];
__decorate([
    ViewChild('wrapper', { static: false }),
    __metadata("design:type", ElementRef)
], ScreenshotToolboxComponent.prototype, "wrapper", void 0);
ScreenshotToolboxComponent = __decorate([ __param(0, Inject(ScreenshotComponent)),
    __metadata("design:paramtypes", [ScreenshotComponent])
], ScreenshotToolboxComponent);

let Ng2ScreenshotModule = class Ng2ScreenshotModule {
};
Ng2ScreenshotModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: Ng2ScreenshotModule });
Ng2ScreenshotModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function Ng2ScreenshotModule_Factory(t) { return new (t || Ng2ScreenshotModule)(); }, providers: [Colors, HightLevelZindex, ToolboxDefaultOptions, DOMProcess, ScreenshotComponent], imports: [[CommonModule]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ToolboxDefaultOptions, [{
        type: Injectable
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Colors, [{
        type: Injectable
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HightLevelZindex, [{
        type: Injectable
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DOMProcess, [{
        type: Injectable
    }], function () { return []; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScreenshotComponent, [{
        type: Component,
        args: [{
                selector: 'ng2-screenshot',
                template: '<div #container><ng-content></ng-content></div>'
            }]
    }], function () { return [{ type: Colors, decorators: [{
                type: Inject,
                args: [forwardRef(() => Colors)]
            }] }, { type: HightLevelZindex, decorators: [{
                type: Inject,
                args: [forwardRef(() => HightLevelZindex)]
            }] }, { type: ToolboxDefaultOptions, decorators: [{
                type: Inject,
                args: [forwardRef(() => ToolboxDefaultOptions)]
            }] }, { type: DOMProcess, decorators: [{
                type: Inject,
                args: [forwardRef(() => DOMProcess)]
            }] }]; }, { isOpenChange: [{
            type: Output,
            args: ['isOpenChange']
        }], api: [{
            type: Output,
            args: ['apiInitialized']
        }], toolboxOptions: [{
            type: Input,
            args: ['toolboxOptions']
        }], container: [{
            type: ViewChild,
            args: ['container', { static: false }]
        }], target: [{
            type: Input,
            args: ['target']
        }], isOpen: [{
            type: Input,
            args: ['isOpen']
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScreenshotToolboxComponent, [{
        type: Component,
        args: [{
                selector: 'ng2-screenshot-toolbox',
                template: `
        <div class="screenshot-toolbox" [hidden]="!parent.showToolbox">
            <div #wrapper>
                <ng-content></ng-content>
            </div>
            <div *ngIf="!hasContent">
                <button class="btn" type="button" (click)="cancel()">
                    Cancel
                </button>
                <button class="btn" type="button" (click)="download()">
                    Download
                </button>
            </div>
        </div>
    `,
                styles: ["/*! Angular Screenshot - v0.1.0 - http://weihanchen.github.io/ng2-screenshot - (c) 2017 weihanchen - MIT */.screenshot-toolbox{width:100%}.screenshot-toolbox button{margin:.2em}.screenshot-toolbox .btn{position:relative;padding:.2em .4em;overflow:hidden;border-width:0;outline:0;border-radius:.2em;box-shadow:0 .1em .2em #4f4f4f;background-color:#e6e3e3;color:#4f4f4f;-webkit-transition:background-color .3s;transition:background-color .3s}.screenshot-toolbox .btn:focus,.screenshot-toolbox .btn:hover{background:#cdcccc}.screenshot-toolbox .btn>*{position:relative}.screenshot-toolbox .btn:before{content:\"\";position:absolute;top:50%;left:50%;display:block;width:0;padding-top:0;border-radius:100%;background-color:rgba(205,204,204,.3);-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.screenshot-toolbox .btn:active:before{width:120%;padding-top:120%;-webkit-transition:width .2s ease-out,padding-top .2s ease-out;transition:width .2s ease-out,padding-top .2s ease-out}.screenshot-toolbox .btn-navy{background-color:#1d9e74}.screenshot-toolbox .btn-navy:focus,.screenshot-toolbox .btn-navy:hover{background-color:#138661}.screenshot-toolbox-custom{visibility:hidden}"]
            }]
    }], function () { return [{ type: ScreenshotComponent, decorators: [{
                type: Inject,
                args: [ScreenshotComponent]
            }] }]; }, { wrapper: [{
            type: ViewChild,
            args: ['wrapper', { static: false }]
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng2ScreenshotModule, { declarations: function () { return [ScreenshotComponent,
        ScreenshotToolboxComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ScreenshotComponent,
        ScreenshotToolboxComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2ScreenshotModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [ScreenshotComponent, ScreenshotToolboxComponent],
                exports: [ScreenshotComponent, ScreenshotToolboxComponent],
                providers: [Colors, HightLevelZindex, ToolboxDefaultOptions, DOMProcess, ScreenshotComponent]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { Ng2ScreenshotModule, ScreenshotComponent as ɵa, ToolboxDefaultOptions as ɵb, Colors as ɵc, HightLevelZindex as ɵd, DOMProcess as ɵe, ScreenshotToolboxComponent as ɵf };

//# sourceMappingURL=ng2-screenshot.js.map