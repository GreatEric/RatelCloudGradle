export declare class DOMProcess {
    private domURL;
    private imageType;
    constructor();
    appendToBody(element: HTMLCanvasElement): Promise<HTMLCanvasElement>;
    canvasToImage(canvas: HTMLCanvasElement): Promise<HTMLImageElement>;
    clearCanvasRect(canvas: HTMLCanvasElement): void;
    dataUrlToImage(url: string): Promise<any>;
    clipImageToCanvas(image: HTMLImageElement, clipStartX: number, clipStartY: number, clipWidth: number, clipHeight: number): Promise<HTMLCanvasElement>;
    createCanvas(width: number, height: number): Promise<HTMLCanvasElement>;
    downloadByUrl(url: string, filename: string): void;
    downloadCanvas(canvas: HTMLCanvasElement, filename: string): Promise<HTMLCanvasElement>;
    getStyle(element: HTMLElement, property: string): any;
    remove(element: HTMLElement): void;
    isTransparent(element: HTMLElement): boolean;
    listenInteractiveCanvas(canvas: HTMLCanvasElement, rectBackground: string | CanvasGradient | CanvasPattern, mouseupListener: any, mousedownListener: any, contextmenuListener: any): Promise<HTMLCanvasElement>;
    setCanvasStyle(canvas: HTMLCanvasElement, left: number, top: number, background: string, zIndex: string): Promise<HTMLCanvasElement>;
    setToolboxPositionStyle(toolboxElement: HTMLElement, left: number, top: number): Promise<HTMLElement>;
    setToolboxStackStyle(toolboxElement: HTMLElement, zIndex: string): Promise<HTMLElement>;
}
