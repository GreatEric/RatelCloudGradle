import { OnInit, OnChanges, EventEmitter, ElementRef } from '@angular/core';
import { ToolboxOptions, Ng2ScreenshotAPI, Rect } from './screenshot.interface';
import { Colors, HightLevelZindex, ToolboxDefaultOptions } from './screenshot.class';
import { DOMProcess } from './screenshot.utils';
/**
 * Capture dom setion with indicate element
 */
import * as ɵngcc0 from '@angular/core';
export declare class ScreenshotComponent implements OnInit, OnChanges {
    private colors;
    private hightLevelZindex;
    private defaultOptions;
    private domprocess;
    container: ElementRef;
    target: string;
    isOpen: boolean;
    toolboxOptions: ToolboxOptions;
    isOpenChange: EventEmitter<{}>;
    api: EventEmitter<Ng2ScreenshotAPI>;
    showToolbox: boolean;
    private cancelText;
    private downloadText;
    private filename;
    private toolboxMargin;
    private interactiveCanvas;
    private rect;
    constructor(colors: Colors, hightLevelZindex: HightLevelZindex, defaultOptions: ToolboxDefaultOptions, domprocess: DOMProcess);
    ngOnInit(): void;
    ngOnChanges(item: any): void;
    private calculateToolboxPosition;
    cancel: () => void;
    download: () => void;
    private downloadFull;
    private findMaxZindex;
    private getElementSelector;
    private getOptions;
    private setHightLevelZindex;
    private toPng;
    canvasMousedownListener: () => void;
    canvasMouseupListener: (canvas: HTMLCanvasElement, rect: Rect) => void;
    canvasContextmenuListener: () => void;
    private closeScreenshot;
    private openScreenshot;
    private resizeCanvas;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ScreenshotComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ScreenshotComponent, "ng2-screenshot", never, {
    "toolboxOptions": "toolboxOptions";
    "target": "target";
    "isOpen": "isOpen";
}, {
    "isOpenChange": "isOpenChange";
    "api": "apiInitialized";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyZWVuc2hvdC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic2NyZWVuc2hvdC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0NBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBPbkNoYW5nZXMsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUb29sYm94T3B0aW9ucywgTmcyU2NyZWVuc2hvdEFQSSwgUmVjdCB9IGZyb20gJy4vc2NyZWVuc2hvdC5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBDb2xvcnMsIEhpZ2h0TGV2ZWxaaW5kZXgsIFRvb2xib3hEZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4vc2NyZWVuc2hvdC5jbGFzcyc7XHJcbmltcG9ydCB7IERPTVByb2Nlc3MgfSBmcm9tICcuL3NjcmVlbnNob3QudXRpbHMnO1xyXG4vKipcclxuICogQ2FwdHVyZSBkb20gc2V0aW9uIHdpdGggaW5kaWNhdGUgZWxlbWVudFxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2NyZWVuc2hvdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuICAgIHByaXZhdGUgY29sb3JzO1xyXG4gICAgcHJpdmF0ZSBoaWdodExldmVsWmluZGV4O1xyXG4gICAgcHJpdmF0ZSBkZWZhdWx0T3B0aW9ucztcclxuICAgIHByaXZhdGUgZG9tcHJvY2VzcztcclxuICAgIGNvbnRhaW5lcjogRWxlbWVudFJlZjtcclxuICAgIHRhcmdldDogc3RyaW5nO1xyXG4gICAgaXNPcGVuOiBib29sZWFuO1xyXG4gICAgdG9vbGJveE9wdGlvbnM6IFRvb2xib3hPcHRpb25zO1xyXG4gICAgaXNPcGVuQ2hhbmdlOiBFdmVudEVtaXR0ZXI8e30+O1xyXG4gICAgYXBpOiBFdmVudEVtaXR0ZXI8TmcyU2NyZWVuc2hvdEFQST47XHJcbiAgICBzaG93VG9vbGJveDogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgY2FuY2VsVGV4dDtcclxuICAgIHByaXZhdGUgZG93bmxvYWRUZXh0O1xyXG4gICAgcHJpdmF0ZSBmaWxlbmFtZTtcclxuICAgIHByaXZhdGUgdG9vbGJveE1hcmdpbjtcclxuICAgIHByaXZhdGUgaW50ZXJhY3RpdmVDYW52YXM7XHJcbiAgICBwcml2YXRlIHJlY3Q7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb2xvcnM6IENvbG9ycywgaGlnaHRMZXZlbFppbmRleDogSGlnaHRMZXZlbFppbmRleCwgZGVmYXVsdE9wdGlvbnM6IFRvb2xib3hEZWZhdWx0T3B0aW9ucywgZG9tcHJvY2VzczogRE9NUHJvY2Vzcyk7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoaXRlbTogYW55KTogdm9pZDtcclxuICAgIHByaXZhdGUgY2FsY3VsYXRlVG9vbGJveFBvc2l0aW9uO1xyXG4gICAgY2FuY2VsOiAoKSA9PiB2b2lkO1xyXG4gICAgZG93bmxvYWQ6ICgpID0+IHZvaWQ7XHJcbiAgICBwcml2YXRlIGRvd25sb2FkRnVsbDtcclxuICAgIHByaXZhdGUgZmluZE1heFppbmRleDtcclxuICAgIHByaXZhdGUgZ2V0RWxlbWVudFNlbGVjdG9yO1xyXG4gICAgcHJpdmF0ZSBnZXRPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBzZXRIaWdodExldmVsWmluZGV4O1xyXG4gICAgcHJpdmF0ZSB0b1BuZztcclxuICAgIGNhbnZhc01vdXNlZG93bkxpc3RlbmVyOiAoKSA9PiB2b2lkO1xyXG4gICAgY2FudmFzTW91c2V1cExpc3RlbmVyOiAoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgcmVjdDogUmVjdCkgPT4gdm9pZDtcclxuICAgIGNhbnZhc0NvbnRleHRtZW51TGlzdGVuZXI6ICgpID0+IHZvaWQ7XHJcbiAgICBwcml2YXRlIGNsb3NlU2NyZWVuc2hvdDtcclxuICAgIHByaXZhdGUgb3BlblNjcmVlbnNob3Q7XHJcbiAgICBwcml2YXRlIHJlc2l6ZUNhbnZhcztcclxufVxyXG4iXX0=