'use strict';
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
let DOMProcess = class DOMProcess {
    constructor() {
        this.domURL = window.URL;
        this.imageType = 'image/png';
    }
    appendToBody(element) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            document.body.appendChild(element);
            return element;
        });
    }
    canvasToImage(canvas) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const url = canvas.toDataURL(this.imageType);
            return yield this.dataUrlToImage(url);
        });
    }
    clearCanvasRect(canvas) {
        const context = canvas.getContext('2d');
        context.clearRect(0, 0, canvas.width, canvas.height);
    }
    dataUrlToImage(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const image = new Image();
                image.onload = () => {
                    resolve(image);
                };
                image.onerror = reject;
                image.src = url;
            });
        });
    }
    clipImageToCanvas(image, clipStartX, clipStartY, clipWidth, clipHeight) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const canvas = yield this.createCanvas(Math.abs(clipWidth), Math.abs(clipHeight));
            const context = canvas.getContext('2d');
            context.drawImage(image, clipStartX, clipStartY, clipWidth, clipHeight, 0, 0, canvas.width, canvas.height);
            this.remove(image);
            return canvas;
        });
    }
    createCanvas(width, height) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const canvas = document.createElement('canvas');
            canvas.width = width;
            canvas.height = height;
            return canvas;
        });
    }
    downloadByUrl(url, filename) {
        const downloadLink = document.createElement('a');
        downloadLink.href = url;
        downloadLink.download = filename;
        downloadLink.target = '_blank';
        downloadLink.click();
        downloadLink.remove();
        this.domURL.revokeObjectURL(url);
    }
    downloadCanvas(canvas, filename) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const downloadUrl = canvas.toDataURL(this.imageType);
            this.downloadByUrl(downloadUrl, filename);
            return canvas;
        });
    }
    getStyle(element, property) {
        const styles = window.getComputedStyle(element);
        return styles[property];
    }
    remove(element) {
        if (element) {
            element.remove();
        }
        element = null;
    }
    isTransparent(element) {
        const backgroundColor = window.getComputedStyle(element).backgroundColor;
        return backgroundColor === 'transparent' || backgroundColor === '' || backgroundColor === 'rgba(0, 0, 0, 0)';
    }
    listenInteractiveCanvas(canvas, rectBackground, mouseupListener, mousedownListener, contextmenuListener) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const context = canvas.getContext('2d');
            const rect = {
                startX: 0,
                startY: 0,
                w: 0,
                h: 0
            };
            let dragging = false;
            const draw = () => {
                context.beginPath();
                context.fillStyle = rectBackground;
                context.fillRect(rect.startX, rect.startY, rect.w, rect.h);
                context.closePath();
            };
            const mousedown = (e) => {
                context.clearRect(0, 0, canvas.width, canvas.height);
                rect.startX = e.pageX - canvas.offsetLeft;
                rect.startY = e.pageY - canvas.offsetTop;
                mousedownListener(rect);
                rect.w = 0;
                rect.h = 0;
                dragging = true;
            };
            const mousemove = (e) => {
                if (dragging) {
                    rect.w = e.pageX - canvas.offsetLeft - rect.startX;
                    rect.h = e.pageY - canvas.offsetTop - rect.startY;
                    context.clearRect(0, 0, canvas.width, canvas.height);
                    draw();
                }
            };
            const mouseup = () => {
                dragging = false;
                mouseupListener(canvas, rect);
            };
            const contextmenu = (e) => {
                contextmenuListener();
                e.preventDefault();
                return false;
            };
            const touchStart = (e) => {
                e.preventDefault();
                const touch = e.changedTouches[0];
                const mouseEvent = new MouseEvent('mousedown', {
                    clientX: touch.pageX,
                    clientY: touch.pageY
                });
                canvas.dispatchEvent(mouseEvent);
            };
            const touched = () => {
                const mouseEvent = new MouseEvent('mouseup', {});
                canvas.dispatchEvent(mouseEvent);
            };
            const touchMove = (e) => {
                e.preventDefault();
                const touch = e.changedTouches[0];
                const mouseEvent = new MouseEvent('mousemove', {
                    clientX: touch.pageX,
                    clientY: touch.pageY
                });
                canvas.dispatchEvent(mouseEvent);
            };
            canvas.addEventListener('mousedown', mousedown, false);
            canvas.addEventListener('mouseup', mouseup, false);
            canvas.addEventListener('mousemove', mousemove, false);
            canvas.addEventListener('touchstart', touchStart, false);
            canvas.addEventListener('touchend', touched, false);
            canvas.addEventListener('touchmove', touchMove, false);
            canvas.addEventListener('contextmenu', contextmenu, false);
            document.body.addEventListener('touchmove', event => event.preventDefault(), false);
            return canvas;
        });
    }
    setCanvasStyle(canvas, left, top, background, zIndex) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            canvas.style.cursor = 'crosshair';
            canvas.style.position = 'absolute';
            canvas.style.left = left + 'px';
            canvas.style.top = top + 'px';
            canvas.style.background = background;
            canvas.style.zIndex = zIndex;
            canvas.style.opacity = '0.5';
            return canvas;
        });
    }
    setToolboxPositionStyle(toolboxElement, left, top) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            toolboxElement.style.left = left + 'px';
            toolboxElement.style.top = top + 'px';
            return toolboxElement;
        });
    }
    setToolboxStackStyle(toolboxElement, zIndex) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            toolboxElement.style.position = 'absolute';
            toolboxElement.style.zIndex = zIndex;
            return toolboxElement;
        });
    }
};
DOMProcess = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], DOMProcess);
export { DOMProcess };
//# sourceMappingURL=data:application/json;base64,