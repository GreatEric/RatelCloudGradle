import * as tslib_1 from "tslib";
import { Component, Input, Inject, forwardRef, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';
import { Colors, HightLevelZindex, ToolboxDefaultOptions } from './screenshot.class';
import { DOMProcess } from './screenshot.utils';
import domtoimage from 'dom-to-image';
import * as jq from 'jquery';
const $ = jq;
/**
 * Capture dom setion with indicate element
 */
let ScreenshotComponent = class ScreenshotComponent {
    constructor(colors, hightLevelZindex, defaultOptions, domprocess) {
        this.colors = colors;
        this.hightLevelZindex = hightLevelZindex;
        this.defaultOptions = defaultOptions;
        this.domprocess = domprocess;
        this.isOpenChange = new EventEmitter();
        this.api = new EventEmitter();
        this.showToolbox = false;
        this.cancelText = 'Cancel';
        this.downloadText = 'Download';
        this.filename = 'screenshot.png';
        this.toolboxMargin = 5;
        this.calculateToolboxPosition = (offsetLeft, offsetTop, rect, toolboxWidth, toolboxHeight) => {
            let left = offsetLeft + rect.startX + rect.w;
            let top = offsetTop + rect.startY + rect.h;
            if (rect.w >= 0) {
                left -= toolboxWidth;
            }
            if (rect.h >= 0) {
                top += this.toolboxMargin;
            }
            else {
                top = top - toolboxHeight - this.toolboxMargin;
            }
            return {
                left,
                top
            };
        };
        this.cancel = () => {
            this.showToolbox = false;
            this.domprocess.clearCanvasRect(this.interactiveCanvas);
        };
        this.download = () => {
            this.isOpenChange.emit(false);
            window.setTimeout(() => {
                const elementSelector = this.getElementSelector();
                const element = elementSelector[0];
                const options = this.getOptions(element);
                domtoimage
                    .toPng(element, options)
                    .then(this.domprocess.dataUrlToImage)
                    .then((image) => {
                    this.domprocess.remove(image);
                    return this.domprocess.clipImageToCanvas(image, this.rect.startX, this.rect.startY, this.rect.w, this.rect.h);
                })
                    .then((canvas) => this.domprocess.downloadCanvas(canvas, this.toolboxOptions.filename))
                    .then(this.domprocess.remove)
                    .catch((error) => console.error(error));
            });
        };
        this.downloadFull = () => {
            this.isOpenChange.emit(false);
            window.setTimeout(() => {
                const elementSelector = this.getElementSelector();
                const element = elementSelector[0];
                const options = this.getOptions(element);
                domtoimage
                    .toPng(element, options)
                    .then((imageUrl) => this.domprocess.downloadByUrl(imageUrl, this.toolboxOptions.filename))
                    .catch((error) => console.error(error));
            });
        };
        this.findMaxZindex = () => {
            let zMax = 0;
            $('body *').each(function () {
                const zIndexStr = $(this).css('zIndex');
                const zIndex = parseInt(zIndexStr, 10);
                if (zIndex && zIndex > zMax) {
                    zMax = zIndex;
                }
            });
            return zMax;
        };
        this.getElementSelector = () => {
            return this.target
                ? $(this.target)
                : $(this.container.nativeElement).filter((index, element) => {
                    const elementName = element.tagName.toLowerCase();
                    return elementName !== 'screenshot-toolbox';
                });
        };
        this.getOptions = (element) => {
            const boudingClientRect = element.getBoundingClientRect();
            let options = {
                width: boudingClientRect.width,
                height: boudingClientRect.height
            };
            if (this.domprocess.isTransparent(element)) {
                const parentBackgroundColor = this.domprocess.getStyle(element, 'backgroundColor');
                options = Object.assign({}, options, { bgcolor: parentBackgroundColor });
            }
            return options;
        };
        this.setHightLevelZindex = () => {
            const maxZindex = this.findMaxZindex();
            this.hightLevelZindex.second = maxZindex + 1;
            this.hightLevelZindex.top = this.hightLevelZindex.second + 1;
        };
        this.toPng = (callback) => new Promise((resolve, reject) => {
            this.isOpenChange.emit(false);
            window.setTimeout(() => {
                const elementSelector = this.getElementSelector();
                const element = elementSelector[0];
                const options = this.getOptions(element);
                return domtoimage
                    .toPng(element, options)
                    .then(this.domprocess.dataUrlToImage)
                    .then((image) => {
                    this.domprocess.remove(image);
                    return this.domprocess.clipImageToCanvas(image, this.rect.startX, this.rect.startY, this.rect.w, this.rect.h);
                })
                    .then((canvas) => {
                    const url = canvas.toDataURL('image/png');
                    if (callback) {
                        callback(url);
                    }
                    resolve(url);
                })
                    .catch((error) => {
                    console.error(error);
                    reject(error);
                });
            });
        });
        this.canvasMousedownListener = () => {
            this.showToolbox = false;
        };
        this.canvasMouseupListener = (canvas, rect) => {
            if (rect.w !== 0 && rect.h !== 0) {
                // this.showToolbox = false;
                this.rect = rect;
                const toolbox = $(this.container.nativeElement).find('ng2-screenshot-toolbox');
                console.log(toolbox.outerWidth());
                // console.log(toolbox.width())
                // // const toolbox = $('ng2-screenshot-toolbox');
                const toolboxElement = toolbox.get(0);
                console.log(toolboxElement.clientWidth);
                console.log(this.hightLevelZindex);
                /**
                 * toolbox position setting
                 * because read elememt's width sould indicated postion method, so we set position method first then move location with dom.
                 */
                this.domprocess
                    .setToolboxStackStyle(toolboxElement, this.hightLevelZindex.top.toString())
                    // .then(this.domprocess.appendToBody)
                    .then(element => {
                    const position = this.calculateToolboxPosition(canvas.offsetLeft, canvas.offsetTop, rect, element.offsetWidth, element.offsetHeight);
                    return this.domprocess.setToolboxPositionStyle(element, position.left, position.top);
                })
                    .then(element => {
                    this.showToolbox = true;
                });
            }
        };
        this.canvasContextmenuListener = () => {
            this.isOpenChange.emit(false);
        };
        this.closeScreenshot = () => {
            this.domprocess.remove(this.interactiveCanvas);
            this.showToolbox = false;
        };
        this.resizeCanvas = () => {
            if (!this.interactiveCanvas) {
                return;
            }
            const elementSelector = this.getElementSelector();
            const boudingClientRect = elementSelector[0].getBoundingClientRect();
            const width = boudingClientRect.width;
            const height = boudingClientRect.height;
            const offset = elementSelector.offset();
            const left = offset.left;
            const top = offset.top;
            this.interactiveCanvas.width = width;
            this.interactiveCanvas.height = height;
            this.domprocess
                .setCanvasStyle(this.interactiveCanvas, left, top, this.colors.gray, this.hightLevelZindex.second.toString())
                .then(() => this.showToolbox = false);
        };
    }
    ngOnInit() {
        if (!this.toolboxOptions) {
            this.toolboxOptions = {
                filename: this.defaultOptions.filename,
                cancelText: this.defaultOptions.cancelText,
                downloadText: this.defaultOptions.downloadText
            };
        }
        this.api.emit({
            cancel: this.cancel,
            download: this.download,
            downloadFull: this.downloadFull,
            toPng: this.toPng
        });
        window.onresize = () => {
            this.resizeCanvas();
        };
    }
    ngOnChanges(item) {
        const { isOpen, toolboxOptions } = item;
        switch (isOpen.currentValue) {
            case true:
                this.openScreenshot();
                break;
            case false:
                this.closeScreenshot();
                break;
            default:
                this.closeScreenshot();
                break;
        }
        if (toolboxOptions) {
            this.cancelText = toolboxOptions.cancelText ? toolboxOptions.cancelText : this.cancelText;
            this.downloadText = toolboxOptions.downloadText ? toolboxOptions.downloadText : this.downloadText;
            this.filename = toolboxOptions.filename ? toolboxOptions.filename : this.filename;
        }
    }
    openScreenshot() {
        const elementSelector = this.getElementSelector();
        const boudingClientRect = elementSelector[0].getBoundingClientRect();
        const width = boudingClientRect.width;
        const height = boudingClientRect.height;
        const offset = elementSelector.offset();
        const left = offset.left;
        const top = offset.top;
        this.setHightLevelZindex();
        this.domprocess
            .createCanvas(width, height)
            .then(canvas => this.domprocess.setCanvasStyle(canvas, left, top, this.colors.gray, this.hightLevelZindex.second.toString()))
            .then(this.domprocess.appendToBody)
            .then(canvas => this.domprocess.listenInteractiveCanvas(canvas, this.colors.lightGray, this.canvasMouseupListener, this.canvasMousedownListener, this.canvasContextmenuListener))
            .then(canvas => (this.interactiveCanvas = canvas));
    }
};
ScreenshotComponent.ctorParameters = () => [
    { type: Colors, decorators: [{ type: Inject, args: [forwardRef(() => Colors),] }] },
    { type: HightLevelZindex, decorators: [{ type: Inject, args: [forwardRef(() => HightLevelZindex),] }] },
    { type: ToolboxDefaultOptions, decorators: [{ type: Inject, args: [forwardRef(() => ToolboxDefaultOptions),] }] },
    { type: DOMProcess, decorators: [{ type: Inject, args: [forwardRef(() => DOMProcess),] }] }
];
tslib_1.__decorate([
    ViewChild('container', { static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], ScreenshotComponent.prototype, "container", void 0);
tslib_1.__decorate([
    Input('target'),
    tslib_1.__metadata("design:type", String)
], ScreenshotComponent.prototype, "target", void 0);
tslib_1.__decorate([
    Input('isOpen'),
    tslib_1.__metadata("design:type", Boolean)
], ScreenshotComponent.prototype, "isOpen", void 0);
tslib_1.__decorate([
    Input('toolboxOptions'),
    tslib_1.__metadata("design:type", Object)
], ScreenshotComponent.prototype, "toolboxOptions", void 0);
tslib_1.__decorate([
    Output('isOpenChange'),
    tslib_1.__metadata("design:type", Object)
], ScreenshotComponent.prototype, "isOpenChange", void 0);
tslib_1.__decorate([
    Output('apiInitialized'),
    tslib_1.__metadata("design:type", Object)
], ScreenshotComponent.prototype, "api", void 0);
ScreenshotComponent = tslib_1.__decorate([
    Component({
        selector: 'ng2-screenshot',
        template: '<div #container><ng-content></ng-content></div>'
    }),
    tslib_1.__param(0, Inject(forwardRef(() => Colors))),
    tslib_1.__param(1, Inject(forwardRef(() => HightLevelZindex))),
    tslib_1.__param(2, Inject(forwardRef(() => ToolboxDefaultOptions))),
    tslib_1.__param(3, Inject(forwardRef(() => DOMProcess))),
    tslib_1.__metadata("design:paramtypes", [Colors,
        HightLevelZindex,
        ToolboxDefaultOptions,
        DOMProcess])
], ScreenshotComponent);
export { ScreenshotComponent };
//# sourceMappingURL=data:application/json;base64,