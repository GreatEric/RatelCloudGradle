/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { TemplateRef } from '@angular/core';
import { NzSafeAny } from 'ng-zorro-antd/core/types';
import { ReplaySubject } from 'rxjs';
import { NzThMeasureDirective } from './cell/th-measure.directive';
import * as ɵngcc0 from '@angular/core';
export declare class NzTableStyleService {
    theadTemplate$: ReplaySubject<TemplateRef<any>>;
    hasFixLeft$: ReplaySubject<boolean>;
    hasFixRight$: ReplaySubject<boolean>;
    hostWidth$: ReplaySubject<number>;
    columnCount$: ReplaySubject<number>;
    showEmpty$: ReplaySubject<boolean>;
    noResult$: ReplaySubject<string | TemplateRef<any> | undefined>;
    private listOfThWidthConfigPx$;
    private tableWidthConfigPx$;
    private manualWidthConfigPx$;
    private listOfAutoWidthPx$;
    listOfListOfThWidthPx$: import("rxjs").Observable<import("./table.types").NzTableSortOrder[]>;
    listOfMeasureColumn$: ReplaySubject<string[]>;
    listOfListOfThWidth$: import("rxjs").Observable<number[]>;
    enableAutoMeasure$: ReplaySubject<boolean>;
    setTheadTemplate(template: TemplateRef<NzSafeAny>): void;
    setHasFixLeft(hasFixLeft: boolean): void;
    setHasFixRight(hasFixRight: boolean): void;
    setTableWidthConfig(widthConfig: Array<string | null>): void;
    setListOfTh(listOfTh: NzThMeasureDirective[]): void;
    setListOfMeasureColumn(listOfTh: NzThMeasureDirective[]): void;
    setListOfAutoWidth(listOfAutoWidth: number[]): void;
    setShowEmpty(showEmpty: boolean): void;
    setNoResult(noResult: string | TemplateRef<NzSafeAny> | undefined): void;
    setScroll(scrollX: string | null, scrollY: string | null): void;
    constructor();
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTableStyleService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NzTableStyleService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtc3R5bGUuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJ0YWJsZS1zdHlsZS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztBQVdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJCQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBbGliYWJhLmNvbSBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaW1wb3J0IHsgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56U2FmZUFueSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOelRoTWVhc3VyZURpcmVjdGl2ZSB9IGZyb20gJy4vY2VsbC90aC1tZWFzdXJlLmRpcmVjdGl2ZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOelRhYmxlU3R5bGVTZXJ2aWNlIHtcbiAgICB0aGVhZFRlbXBsYXRlJDogUmVwbGF5U3ViamVjdDxUZW1wbGF0ZVJlZjxhbnk+PjtcbiAgICBoYXNGaXhMZWZ0JDogUmVwbGF5U3ViamVjdDxib29sZWFuPjtcbiAgICBoYXNGaXhSaWdodCQ6IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj47XG4gICAgaG9zdFdpZHRoJDogUmVwbGF5U3ViamVjdDxudW1iZXI+O1xuICAgIGNvbHVtbkNvdW50JDogUmVwbGF5U3ViamVjdDxudW1iZXI+O1xuICAgIHNob3dFbXB0eSQ6IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj47XG4gICAgbm9SZXN1bHQkOiBSZXBsYXlTdWJqZWN0PHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4gfCB1bmRlZmluZWQ+O1xuICAgIHByaXZhdGUgbGlzdE9mVGhXaWR0aENvbmZpZ1B4JDtcbiAgICBwcml2YXRlIHRhYmxlV2lkdGhDb25maWdQeCQ7XG4gICAgcHJpdmF0ZSBtYW51YWxXaWR0aENvbmZpZ1B4JDtcbiAgICBwcml2YXRlIGxpc3RPZkF1dG9XaWR0aFB4JDtcbiAgICBsaXN0T2ZMaXN0T2ZUaFdpZHRoUHgkOiBpbXBvcnQoXCJyeGpzXCIpLk9ic2VydmFibGU8aW1wb3J0KFwiLi90YWJsZS50eXBlc1wiKS5OelRhYmxlU29ydE9yZGVyW10+O1xuICAgIGxpc3RPZk1lYXN1cmVDb2x1bW4kOiBSZXBsYXlTdWJqZWN0PHN0cmluZ1tdPjtcbiAgICBsaXN0T2ZMaXN0T2ZUaFdpZHRoJDogaW1wb3J0KFwicnhqc1wiKS5PYnNlcnZhYmxlPG51bWJlcltdPjtcbiAgICBlbmFibGVBdXRvTWVhc3VyZSQ6IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj47XG4gICAgc2V0VGhlYWRUZW1wbGF0ZSh0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8TnpTYWZlQW55Pik6IHZvaWQ7XG4gICAgc2V0SGFzRml4TGVmdChoYXNGaXhMZWZ0OiBib29sZWFuKTogdm9pZDtcbiAgICBzZXRIYXNGaXhSaWdodChoYXNGaXhSaWdodDogYm9vbGVhbik6IHZvaWQ7XG4gICAgc2V0VGFibGVXaWR0aENvbmZpZyh3aWR0aENvbmZpZzogQXJyYXk8c3RyaW5nIHwgbnVsbD4pOiB2b2lkO1xuICAgIHNldExpc3RPZlRoKGxpc3RPZlRoOiBOelRoTWVhc3VyZURpcmVjdGl2ZVtdKTogdm9pZDtcbiAgICBzZXRMaXN0T2ZNZWFzdXJlQ29sdW1uKGxpc3RPZlRoOiBOelRoTWVhc3VyZURpcmVjdGl2ZVtdKTogdm9pZDtcbiAgICBzZXRMaXN0T2ZBdXRvV2lkdGgobGlzdE9mQXV0b1dpZHRoOiBudW1iZXJbXSk6IHZvaWQ7XG4gICAgc2V0U2hvd0VtcHR5KHNob3dFbXB0eTogYm9vbGVhbik6IHZvaWQ7XG4gICAgc2V0Tm9SZXN1bHQobm9SZXN1bHQ6IHN0cmluZyB8IFRlbXBsYXRlUmVmPE56U2FmZUFueT4gfCB1bmRlZmluZWQpOiB2b2lkO1xuICAgIHNldFNjcm9sbChzY3JvbGxYOiBzdHJpbmcgfCBudWxsLCBzY3JvbGxZOiBzdHJpbmcgfCBudWxsKTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcigpO1xufVxuIl19