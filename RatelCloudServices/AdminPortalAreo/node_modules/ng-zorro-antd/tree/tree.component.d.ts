/**
 * @license
 * Copyright Alibaba.com All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { AfterViewInit, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NzConfigService } from 'ng-zorro-antd/core/config';
import { NzNoAnimationDirective } from 'ng-zorro-antd/core/no-animation';
import { NzFormatBeforeDropEvent, NzFormatEmitEvent, NzTreeBase, NzTreeBaseService, NzTreeNode, NzTreeNodeKey, NzTreeNodeOptions } from 'ng-zorro-antd/core/tree';
import { BooleanInput, NzSafeAny } from 'ng-zorro-antd/core/types';
import { Observable, Subject } from 'rxjs';
import { NzTreeService } from './tree.service';
import * as ɵngcc0 from '@angular/core';
export declare function NzTreeServiceFactory(higherOrderService: NzTreeBaseService, treeService: NzTreeService): NzTreeBaseService;
export declare class NzTreeComponent extends NzTreeBase implements OnInit, OnDestroy, ControlValueAccessor, OnChanges, AfterViewInit {
    nzConfigService: NzConfigService;
    private cdr;
    noAnimation?: NzNoAnimationDirective | undefined;
    static ngAcceptInputType_nzShowIcon: BooleanInput;
    static ngAcceptInputType_nzHideUnMatched: BooleanInput;
    static ngAcceptInputType_nzBlockNode: BooleanInput;
    static ngAcceptInputType_nzExpandAll: BooleanInput;
    static ngAcceptInputType_nzSelectMode: BooleanInput;
    static ngAcceptInputType_nzCheckStrictly: BooleanInput;
    static ngAcceptInputType_nzShowExpand: BooleanInput;
    static ngAcceptInputType_nzShowLine: BooleanInput;
    static ngAcceptInputType_nzCheckable: BooleanInput;
    static ngAcceptInputType_nzAsyncData: BooleanInput;
    static ngAcceptInputType_nzDraggable: BooleanInput;
    static ngAcceptInputType_nzMultiple: BooleanInput;
    nzShowIcon: boolean;
    nzHideUnMatched: boolean;
    nzBlockNode: boolean;
    nzExpandAll: boolean;
    nzSelectMode: boolean;
    nzCheckStrictly: boolean;
    nzShowExpand: boolean;
    nzShowLine: boolean;
    nzCheckable: boolean;
    nzAsyncData: boolean;
    nzDraggable: boolean;
    nzMultiple: boolean;
    nzExpandedIcon: TemplateRef<{
        $implicit: NzTreeNode;
        origin: NzTreeNodeOptions;
    }>;
    nzVirtualItemSize: number;
    nzVirtualMaxBufferPx: number;
    nzVirtualMinBufferPx: number;
    nzVirtualHeight: number | boolean;
    nzTreeTemplate: TemplateRef<{
        $implicit: NzTreeNode;
        origin: NzTreeNodeOptions;
    }>;
    nzBeforeDrop: (confirm: NzFormatBeforeDropEvent) => Observable<boolean>;
    nzData: NzTreeNodeOptions[] | NzTreeNode[];
    nzExpandedKeys: NzTreeNodeKey[];
    nzSelectedKeys: NzTreeNodeKey[];
    nzCheckedKeys: NzTreeNodeKey[];
    nzSearchValue: string;
    nzSearchFunc: (node: NzTreeNodeOptions) => boolean;
    nzTreeTemplateChild: TemplateRef<{
        $implicit: NzTreeNode;
        origin: NzTreeNodeOptions;
    }>;
    cdkVirtualScrollViewport: CdkVirtualScrollViewport;
    nzFlattenNodes: NzTreeNode[];
    beforeInit: boolean;
    readonly nzExpandedKeysChange: EventEmitter<string[]>;
    readonly nzSelectedKeysChange: EventEmitter<string[]>;
    readonly nzCheckedKeysChange: EventEmitter<string[]>;
    readonly nzSearchValueChange: EventEmitter<NzFormatEmitEvent>;
    readonly nzClick: EventEmitter<NzFormatEmitEvent>;
    readonly nzDblClick: EventEmitter<NzFormatEmitEvent>;
    readonly nzContextMenu: EventEmitter<NzFormatEmitEvent>;
    readonly nzCheckBoxChange: EventEmitter<NzFormatEmitEvent>;
    readonly nzExpandChange: EventEmitter<NzFormatEmitEvent>;
    readonly nzOnDragStart: EventEmitter<NzFormatEmitEvent>;
    readonly nzOnDragEnter: EventEmitter<NzFormatEmitEvent>;
    readonly nzOnDragOver: EventEmitter<NzFormatEmitEvent>;
    readonly nzOnDragLeave: EventEmitter<NzFormatEmitEvent>;
    readonly nzOnDrop: EventEmitter<NzFormatEmitEvent>;
    readonly nzOnDragEnd: EventEmitter<NzFormatEmitEvent>;
    HIDDEN_STYLE: {
        width: number;
        height: number;
        display: string;
        overflow: string;
        opacity: number;
        border: number;
        padding: number;
        margin: number;
    };
    destroy$: Subject<unknown>;
    onChange: (value: NzTreeNode[]) => void;
    onTouched: () => void;
    writeValue(value: NzTreeNode[]): void;
    registerOnChange(fn: (_: NzTreeNode[]) => void): void;
    registerOnTouched(fn: () => void): void;
    /**
     * Render all properties of nzTree
     * @param changes: all changes from @Input
     */
    renderTreeProperties(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    trackByFlattenNode(_: number, node: NzTreeNode): string;
    /**
     * nzData
     * @param value
     */
    handleNzData(value: NzSafeAny[]): void;
    handleFlattenNodes(data: NzTreeNode[], expandKeys?: NzTreeNodeKey[] | true): void;
    handleCheckedKeys(keys: NzTreeNodeKey[]): void;
    handleExpandedKeys(keys?: NzTreeNodeKey[] | true): void;
    handleSelectedKeys(keys: NzTreeNodeKey[], isMulti: boolean): void;
    handleSearchValue(value: string, searchFunc?: (node: NzTreeNodeOptions) => boolean): void;
    /**
     * Handle emit event
     * @param event
     * handle each event
     */
    eventTriggerChanged(event: NzFormatEmitEvent): void;
    /**
     * Click expand icon
     */
    renderTree(): void;
    constructor(nzTreeService: NzTreeBaseService, nzConfigService: NzConfigService, cdr: ChangeDetectorRef, noAnimation?: NzNoAnimationDirective | undefined);
    ngOnInit(): void;
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTreeComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzTreeComponent, "nz-tree", ["nzTree"], {
    "nzExpandAll": "nzExpandAll";
    "nzSelectMode": "nzSelectMode";
    "nzCheckStrictly": "nzCheckStrictly";
    "nzShowExpand": "nzShowExpand";
    "nzShowLine": "nzShowLine";
    "nzCheckable": "nzCheckable";
    "nzAsyncData": "nzAsyncData";
    "nzDraggable": "nzDraggable";
    "nzMultiple": "nzMultiple";
    "nzVirtualItemSize": "nzVirtualItemSize";
    "nzVirtualMaxBufferPx": "nzVirtualMaxBufferPx";
    "nzVirtualMinBufferPx": "nzVirtualMinBufferPx";
    "nzVirtualHeight": "nzVirtualHeight";
    "nzData": "nzData";
    "nzExpandedKeys": "nzExpandedKeys";
    "nzSelectedKeys": "nzSelectedKeys";
    "nzCheckedKeys": "nzCheckedKeys";
    "nzShowIcon": "nzShowIcon";
    "nzHideUnMatched": "nzHideUnMatched";
    "nzBlockNode": "nzBlockNode";
    "nzExpandedIcon": "nzExpandedIcon";
    "nzTreeTemplate": "nzTreeTemplate";
    "nzBeforeDrop": "nzBeforeDrop";
    "nzSearchValue": "nzSearchValue";
    "nzSearchFunc": "nzSearchFunc";
}, {
    "nzExpandedKeysChange": "nzExpandedKeysChange";
    "nzSelectedKeysChange": "nzSelectedKeysChange";
    "nzCheckedKeysChange": "nzCheckedKeysChange";
    "nzSearchValueChange": "nzSearchValueChange";
    "nzClick": "nzClick";
    "nzDblClick": "nzDblClick";
    "nzContextMenu": "nzContextMenu";
    "nzCheckBoxChange": "nzCheckBoxChange";
    "nzExpandChange": "nzExpandChange";
    "nzOnDragStart": "nzOnDragStart";
    "nzOnDragEnter": "nzOnDragEnter";
    "nzOnDragOver": "nzOnDragOver";
    "nzOnDragLeave": "nzOnDragLeave";
    "nzOnDrop": "nzOnDrop";
    "nzOnDragEnd": "nzOnDragEnd";
}, ["nzTreeTemplateChild"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidHJlZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlIQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBbGliYWJhLmNvbSBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaW1wb3J0IHsgQ2RrVmlydHVhbFNjcm9sbFZpZXdwb3J0IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Njcm9sbGluZyc7XG5pbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2UsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE56Q29uZmlnU2VydmljZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS9jb25maWcnO1xuaW1wb3J0IHsgTnpOb0FuaW1hdGlvbkRpcmVjdGl2ZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS9uby1hbmltYXRpb24nO1xuaW1wb3J0IHsgTnpGb3JtYXRCZWZvcmVEcm9wRXZlbnQsIE56Rm9ybWF0RW1pdEV2ZW50LCBOelRyZWVCYXNlLCBOelRyZWVCYXNlU2VydmljZSwgTnpUcmVlTm9kZSwgTnpUcmVlTm9kZUtleSwgTnpUcmVlTm9kZU9wdGlvbnMgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHJlZSc7XG5pbXBvcnQgeyBCb29sZWFuSW5wdXQsIE56U2FmZUFueSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOelRyZWVTZXJ2aWNlIH0gZnJvbSAnLi90cmVlLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gTnpUcmVlU2VydmljZUZhY3RvcnkoaGlnaGVyT3JkZXJTZXJ2aWNlOiBOelRyZWVCYXNlU2VydmljZSwgdHJlZVNlcnZpY2U6IE56VHJlZVNlcnZpY2UpOiBOelRyZWVCYXNlU2VydmljZTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56VHJlZUNvbXBvbmVudCBleHRlbmRzIE56VHJlZUJhc2UgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgbnpDb25maWdTZXJ2aWNlOiBOekNvbmZpZ1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBjZHI7XG4gICAgbm9BbmltYXRpb24/OiBOek5vQW5pbWF0aW9uRGlyZWN0aXZlIHwgdW5kZWZpbmVkO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uelNob3dJY29uOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256SGlkZVVuTWF0Y2hlZDogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekJsb2NrTm9kZTogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekV4cGFuZEFsbDogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uelNlbGVjdE1vZGU6IEJvb2xlYW5JbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpDaGVja1N0cmljdGx5OiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256U2hvd0V4cGFuZDogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uelNob3dMaW5lOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256Q2hlY2thYmxlOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256QXN5bmNEYXRhOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256RHJhZ2dhYmxlOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256TXVsdGlwbGU6IEJvb2xlYW5JbnB1dDtcbiAgICBuelNob3dJY29uOiBib29sZWFuO1xuICAgIG56SGlkZVVuTWF0Y2hlZDogYm9vbGVhbjtcbiAgICBuekJsb2NrTm9kZTogYm9vbGVhbjtcbiAgICBuekV4cGFuZEFsbDogYm9vbGVhbjtcbiAgICBuelNlbGVjdE1vZGU6IGJvb2xlYW47XG4gICAgbnpDaGVja1N0cmljdGx5OiBib29sZWFuO1xuICAgIG56U2hvd0V4cGFuZDogYm9vbGVhbjtcbiAgICBuelNob3dMaW5lOiBib29sZWFuO1xuICAgIG56Q2hlY2thYmxlOiBib29sZWFuO1xuICAgIG56QXN5bmNEYXRhOiBib29sZWFuO1xuICAgIG56RHJhZ2dhYmxlOiBib29sZWFuO1xuICAgIG56TXVsdGlwbGU6IGJvb2xlYW47XG4gICAgbnpFeHBhbmRlZEljb246IFRlbXBsYXRlUmVmPHtcbiAgICAgICAgJGltcGxpY2l0OiBOelRyZWVOb2RlO1xuICAgICAgICBvcmlnaW46IE56VHJlZU5vZGVPcHRpb25zO1xuICAgIH0+O1xuICAgIG56VmlydHVhbEl0ZW1TaXplOiBudW1iZXI7XG4gICAgbnpWaXJ0dWFsTWF4QnVmZmVyUHg6IG51bWJlcjtcbiAgICBuelZpcnR1YWxNaW5CdWZmZXJQeDogbnVtYmVyO1xuICAgIG56VmlydHVhbEhlaWdodDogbnVtYmVyIHwgYm9vbGVhbjtcbiAgICBuelRyZWVUZW1wbGF0ZTogVGVtcGxhdGVSZWY8e1xuICAgICAgICAkaW1wbGljaXQ6IE56VHJlZU5vZGU7XG4gICAgICAgIG9yaWdpbjogTnpUcmVlTm9kZU9wdGlvbnM7XG4gICAgfT47XG4gICAgbnpCZWZvcmVEcm9wOiAoY29uZmlybTogTnpGb3JtYXRCZWZvcmVEcm9wRXZlbnQpID0+IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gICAgbnpEYXRhOiBOelRyZWVOb2RlT3B0aW9uc1tdIHwgTnpUcmVlTm9kZVtdO1xuICAgIG56RXhwYW5kZWRLZXlzOiBOelRyZWVOb2RlS2V5W107XG4gICAgbnpTZWxlY3RlZEtleXM6IE56VHJlZU5vZGVLZXlbXTtcbiAgICBuekNoZWNrZWRLZXlzOiBOelRyZWVOb2RlS2V5W107XG4gICAgbnpTZWFyY2hWYWx1ZTogc3RyaW5nO1xuICAgIG56U2VhcmNoRnVuYzogKG5vZGU6IE56VHJlZU5vZGVPcHRpb25zKSA9PiBib29sZWFuO1xuICAgIG56VHJlZVRlbXBsYXRlQ2hpbGQ6IFRlbXBsYXRlUmVmPHtcbiAgICAgICAgJGltcGxpY2l0OiBOelRyZWVOb2RlO1xuICAgICAgICBvcmlnaW46IE56VHJlZU5vZGVPcHRpb25zO1xuICAgIH0+O1xuICAgIGNka1ZpcnR1YWxTY3JvbGxWaWV3cG9ydDogQ2RrVmlydHVhbFNjcm9sbFZpZXdwb3J0O1xuICAgIG56RmxhdHRlbk5vZGVzOiBOelRyZWVOb2RlW107XG4gICAgYmVmb3JlSW5pdDogYm9vbGVhbjtcbiAgICByZWFkb25seSBuekV4cGFuZGVkS2V5c0NoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZ1tdPjtcbiAgICByZWFkb25seSBuelNlbGVjdGVkS2V5c0NoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZ1tdPjtcbiAgICByZWFkb25seSBuekNoZWNrZWRLZXlzQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nW10+O1xuICAgIHJlYWRvbmx5IG56U2VhcmNoVmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD47XG4gICAgcmVhZG9ubHkgbnpDbGljazogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PjtcbiAgICByZWFkb25seSBuekRibENsaWNrOiBFdmVudEVtaXR0ZXI8TnpGb3JtYXRFbWl0RXZlbnQ+O1xuICAgIHJlYWRvbmx5IG56Q29udGV4dE1lbnU6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD47XG4gICAgcmVhZG9ubHkgbnpDaGVja0JveENoYW5nZTogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PjtcbiAgICByZWFkb25seSBuekV4cGFuZENoYW5nZTogRXZlbnRFbWl0dGVyPE56Rm9ybWF0RW1pdEV2ZW50PjtcbiAgICByZWFkb25seSBuek9uRHJhZ1N0YXJ0OiBFdmVudEVtaXR0ZXI8TnpGb3JtYXRFbWl0RXZlbnQ+O1xuICAgIHJlYWRvbmx5IG56T25EcmFnRW50ZXI6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD47XG4gICAgcmVhZG9ubHkgbnpPbkRyYWdPdmVyOiBFdmVudEVtaXR0ZXI8TnpGb3JtYXRFbWl0RXZlbnQ+O1xuICAgIHJlYWRvbmx5IG56T25EcmFnTGVhdmU6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD47XG4gICAgcmVhZG9ubHkgbnpPbkRyb3A6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD47XG4gICAgcmVhZG9ubHkgbnpPbkRyYWdFbmQ6IEV2ZW50RW1pdHRlcjxOekZvcm1hdEVtaXRFdmVudD47XG4gICAgSElEREVOX1NUWUxFOiB7XG4gICAgICAgIHdpZHRoOiBudW1iZXI7XG4gICAgICAgIGhlaWdodDogbnVtYmVyO1xuICAgICAgICBkaXNwbGF5OiBzdHJpbmc7XG4gICAgICAgIG92ZXJmbG93OiBzdHJpbmc7XG4gICAgICAgIG9wYWNpdHk6IG51bWJlcjtcbiAgICAgICAgYm9yZGVyOiBudW1iZXI7XG4gICAgICAgIHBhZGRpbmc6IG51bWJlcjtcbiAgICAgICAgbWFyZ2luOiBudW1iZXI7XG4gICAgfTtcbiAgICBkZXN0cm95JDogU3ViamVjdDx1bmtub3duPjtcbiAgICBvbkNoYW5nZTogKHZhbHVlOiBOelRyZWVOb2RlW10pID0+IHZvaWQ7XG4gICAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IE56VHJlZU5vZGVbXSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IE56VHJlZU5vZGVbXSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlbmRlciBhbGwgcHJvcGVydGllcyBvZiBuelRyZWVcbiAgICAgKiBAcGFyYW0gY2hhbmdlczogYWxsIGNoYW5nZXMgZnJvbSBASW5wdXRcbiAgICAgKi9cbiAgICByZW5kZXJUcmVlUHJvcGVydGllcyhjaGFuZ2VzOiB7XG4gICAgICAgIFtwcm9wZXJ0eU5hbWU6IHN0cmluZ106IFNpbXBsZUNoYW5nZTtcbiAgICB9KTogdm9pZDtcbiAgICB0cmFja0J5RmxhdHRlbk5vZGUoXzogbnVtYmVyLCBub2RlOiBOelRyZWVOb2RlKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIG56RGF0YVxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqL1xuICAgIGhhbmRsZU56RGF0YSh2YWx1ZTogTnpTYWZlQW55W10pOiB2b2lkO1xuICAgIGhhbmRsZUZsYXR0ZW5Ob2RlcyhkYXRhOiBOelRyZWVOb2RlW10sIGV4cGFuZEtleXM/OiBOelRyZWVOb2RlS2V5W10gfCB0cnVlKTogdm9pZDtcbiAgICBoYW5kbGVDaGVja2VkS2V5cyhrZXlzOiBOelRyZWVOb2RlS2V5W10pOiB2b2lkO1xuICAgIGhhbmRsZUV4cGFuZGVkS2V5cyhrZXlzPzogTnpUcmVlTm9kZUtleVtdIHwgdHJ1ZSk6IHZvaWQ7XG4gICAgaGFuZGxlU2VsZWN0ZWRLZXlzKGtleXM6IE56VHJlZU5vZGVLZXlbXSwgaXNNdWx0aTogYm9vbGVhbik6IHZvaWQ7XG4gICAgaGFuZGxlU2VhcmNoVmFsdWUodmFsdWU6IHN0cmluZywgc2VhcmNoRnVuYz86IChub2RlOiBOelRyZWVOb2RlT3B0aW9ucykgPT4gYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSGFuZGxlIGVtaXQgZXZlbnRcbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKiBoYW5kbGUgZWFjaCBldmVudFxuICAgICAqL1xuICAgIGV2ZW50VHJpZ2dlckNoYW5nZWQoZXZlbnQ6IE56Rm9ybWF0RW1pdEV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDbGljayBleHBhbmQgaWNvblxuICAgICAqL1xuICAgIHJlbmRlclRyZWUoKTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihuelRyZWVTZXJ2aWNlOiBOelRyZWVCYXNlU2VydmljZSwgbnpDb25maWdTZXJ2aWNlOiBOekNvbmZpZ1NlcnZpY2UsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIG5vQW5pbWF0aW9uPzogTnpOb0FuaW1hdGlvbkRpcmVjdGl2ZSB8IHVuZGVmaW5lZCk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7XG4gICAgICAgIFtwcm9wZXJ0eU5hbWU6IHN0cmluZ106IFNpbXBsZUNoYW5nZTtcbiAgICB9KTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19